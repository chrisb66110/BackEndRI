 c sobre el uso de punteros inteligentes stack overflow en ol stack overflow en ol preguntas etiquetas usuarios iniciar n registrarse comunidad actual stack overflow en ol ayuda chat stack overflow meta en ol tus comunidades strate o inicia n para personalizar tu lista s comunidades stack exchange blog de la empresa recorrido comienza para acceder a una breve n general del sitio centro de ayuda respuestas detalladas para cualquier pregunta que puedas tener meta analizar el funcionamiento y las ticas de este sitio sobre nosotros aprende s sobre stack overflow la empresa negocios aprende s sobre mo contratar desarrolladores o publicitarte con nosotros este sitio usa cookies para ofrecer nuestros servicios y para mostrarte anuncios relevantes y ofertas laborales al usar este sitio reconoces haber leido y entendido nuestra tica de cookies tica de privacidad y nuestros rminos de servicio el uso de los productos y servicios de stack overflow incluyendo la red de stack overflow sujeta a estas ticas y rminos danos a construir una comunidad amable y colaborativa conoce nuestro nuevo digo de conducta sobre el uso de punteros inteligentes formular una pregunta voto a favor 2 votar en contra favorito supongamos que se tiene el hipottico caso donde se utilizan punteros para todo tipo de variable ms exactamente tenemos el siguiente procedimiento para leer los elementos de un arreglo unidimensional void leer int new int for 0 dim cout 1 cin delete i como se puede apreciar incluso la variable i que solo se utiliza para recorrer los elementos del arreglo es declarada como un puntero a int y como tal al final del procedimiento se debe liberar la memoria manualmente cul sera la solucin ms razonable para que la variable i permanezca dentro del mbito del bucle for y al mismo tiempo se evite liberar manualmente la memoria asignada para dicho puntero mi primer intento fue el que se tiene a continuacin void leer for new dim cout 1 cin delete i el problema es que se genera un error al momento de llegar a la instruccin delete i pues dicha variable ya no existe fuera del mbito del for despus se me ocurri lo siguiente void leer for new dim cout 1 cin delete i no obstante tengo serias dudas de que lo anterior sea una buena idea porque en cada iteracin estoy liberando la memoria asignada no saba muy bien que hacer hasta que descubr a los llamados punteros inteligentes smart pointers gracias paula y entonces llegu al siguiente cdigo void leer for i make dim cout 1 cin qu bonito verdad la variable i est en dentro del mbito del for y no tenemos que preocuparnos de liberar manualmente la memoria asignada entonces surge mi pregunta es este un uso vlido de los punteros inteligentes hago esta pregunta porque a pesar de revisar algunos enlaces de so donde se analizan en que casos se deben usar este tipo de punteros todava no tengo del todo claro si en mi caso en particular el ltimo fragmento de cdigo que puse sea una solucin correcta y aceptable gracias de antemano por sus comentarios y o respuestas c punteros c compartir mejorar esta pregunta editada el 15 may a las 12 32 formulada el 13 may a las 15 34 xam 459 2 4 14 1 raspando el cierre por basada en opiniones no lo voto porque puede ser interesante para otros pero as reformularla trauma el 13 may a las 17 17 1 si ahora que lo vuelvo a leer entiendo que mi pregunta pueda ser cerrada por ese motivo de reformularla xam el 13 may a las 17 26 ade un comentario 1 respuesta 1 activas s antiguas votos voto a favor 2 votar en contra aceptada es este un uso vlido de los punteros inteligentes claro el cdigo compila se ejecuta y no produce errores en tiempo de ejecucin ni fugas de memoria as pues es un uso vlido otra cosa es que el cdigo que has mostrado como ejemplo sea un uso inteligente de los punteros inteligentes que a mi entender no lo es por ejemplo cul sera la solucin ms razonable para que la variable i permanezca dentro del mbito del bucle for y al mismo tiempo se evite liberar la memoria asignada para dicho puntero la razn de ser de los punteros inteligentes es precisamente liberar la memoria asignada a ellos as que si queras que la memoria asignada no se liberase un puntero inteligente no debera ser tu eleccin los punteros inteligentes fueron introducidos en el estndar c aunque en c ya exista un intento de estandarizar el modismo raii 1 sobre punteros 2 antes del estndar de 2011 ese intento era muy limitado y poco flexible as que se decidi deprecarlo y desarrollar tres tipos de punteros inteligentes puntero nico std unique envuelve a un puntero que conceptualmente tendr un nico propietario cuando se deja de usar el puntero o se reasigna se liberan los recursos que estuviera manejando es posible mover el puntero entre diferentes mbitos std unique dame std unique result obtenemos dato de una fuente externa el dato necesita ser borrado cuando se deje de usar int factoria asignamos el puntero result devolvemos el puntero inteligente return result el std unique creado dentro de dame no libera el puntero asignado al salir de mbito si no que hace que cambie de propietario siendo el anterior propietario la funcin dame y el nuevo propietario el llamador de la misma puntero compartido std shared envuelve a un puntero que conceptualmente tendr mltiples propietarios la cantidad de propietarios del puntero es recordada como un contador atmico manejado por el propio puntero inteligente creciendo al ganar un propietario y decreciendo al perderlo cuando el contador de propietarios llega a cero se liberaran los recursos que el puntero estuviera manejando tambin es posible mover el puntero entre diferentes mbitos y si en lugar de moverlo se copia se actualizar el contador de propietarios esto puede ser costoso a nivel de proceso porque manejar dicho contador implica varias comprobaciones de seguridad el siguiente cdigo struct s void std shared std cout de sp sp use shared auto sp std make referencia no aumenta propietarios copia aumenta propietarios referencia no aumenta propietarios return 0 producira la siguiente salida propietarios de 0 de 0 de 0 1 puntero dbil std weak envuelve a un puntero del que conceptualmente no ser propietario cualquier uso del puntero requiere bloquearlo lo que devolver un puntero compartido permite saber si existe el objeto al que apunta mediante la funcin std weak expired cundo usar los punteros inteligentes se usar el puntero nico cuando sepamos que el recurso apuntado tendr un nico propietario el puntero compartido ser usado cuando el recurso apuntado tenga varios propietarios y el puntero dbil se usar para reclamar el uso de punteros compartidos sin apropiarse de ellos que gracias por mencionarlo trauma el std auto deprecado en c y eliminado del estndar en c compartir mejorar esta respuesta editada el 15 may a las 12 23 respondida el 15 may a las 10 34 paula 17 3 22 50 cuando me a a que se evite liberar la memoria asignada hablaba de evitar usar el operador delete se me usar la palabra acabo de editar la pregunta xam el 15 may a las 12 34 pues yo no lo p paula el 15 may a las 12 35 s de eso su respuesta genial gracias por la n sobre los distintos tipos de punteros inteligentes xam el 15 may a las 12 36 ade un comentario tu respuesta borrador guardado borrador descartado registrarse o iniciar n registrarse mediante google registrarse mediante facebook strate con email y a publicar como invitado nombre correo nico publicar como invitado nombre correo nico descartar al dar click en publica tu reconoces que has leido nuestros rminos de servicio actualizados la tica de privacidad y la tica de cookies y que el uso continuo de este sitio sujeto a estas ticas no es la respuesta que buscas examina otras preguntas con la etiqueta c punteros c o formula tu propia pregunta formulada hace 3 meses vista 71 veces activo hace 3 meses enlazados 4 n correcta raii en c relacionados 0 duda con listas ligadas c 5 duda con enteros punteros y nullptr 6 n entre punteros inteligentes 0 error al implementar un puntero a array en c 2 duda al asignar memoria mica a una estructura tipo matriz en c 1 copiado de punteros matriz 4 reservar memoria con malloc y avanzar el puntero es lido 2 liberar memoria c 2 dudas sobre arrays de punteros 0 duda sobre una n preguntas populares en la red remove old non indexed levers for gear changing to make speed bike is there a decentralized zk snark knowledge succinct non interactive argument of what do the smaller notes in the treble clef indicate bend text between ellipsoids how to take second derivative implicitly do i intuitively know if someone already used their reaction how far did forrest gump run without using numbers get the highest salary you can but t exaggerate which star trek movie has a scene where there is a that creates life why can std set a single compile do i have to declare painkillers when going to the usa what focal length of glasses is best for photography if everyone in the world disappeared except 35 random people how long would it take for one of them to realize re not alone how to insert curly bracket in multirow table how to encourage a child with autism to practice reading how is no password more secure than username should i clock in if computer started updating please help to identify vintage aircraft what is wrong with echo or echo stuff if arm is why is unarmed and not gimp vs photoshop why did political parties form in the united states calculate all possible keys for aes 128 encryption to exploit hardware encryption is neil s claim that the gregorian calendar is the most accurate calendar ever true s preguntas populares fuente de preguntas lang cpp stack overflow en ol recorrido ayuda chat contacto feedback mobile empresa stack overflow stack overflow business developer jobs acerca de prensa legal tica de privacidad stack exchange network technology life arts culture recreation science other stack overflow server fault super user web applications ask ubuntu webmasters game development tex latex software engineering unix linux ask different wordpress development geographic information systems electrical engineering android enthusiasts information security database administrators drupal answers sharepoint user experience mathematica salesforce answers stack overflow em s blender network engineering cryptography code review magento software recommendations signal processing emacs raspberry pi stack overflow nnnn programming puzzles code golf stack overflow en ol ethereum data science arduino bitcoin more photography science fiction fantasy graphic design movies tv music practice theory worldbuilding seasoned advice home improvement personal finance money academia law more english language usage skeptics mi yodeya travel christianity english language learners japanese language arqade bicycles role playing games anime manga puzzling motor vehicle maintenance repair more mathoverflow mathematics cross validated theoretical computer science physics chemistry biology computer science philosophy more meta stack exchange stack apps api data area 51 blog facebook twitter linkedin o del sitio logo 2018 stack exchange inc contribuciones de usuarios licenciadas bajo cc by sa 3 0 con n requerida rev 2018 8 27 31416 stack overflow en ol funciona mejor con javascript habilitado 