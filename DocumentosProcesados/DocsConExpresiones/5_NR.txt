 cmo saber si necesitas una base de datos nosql eugenio mendoza medium homepage become a member sign in get started homepage eugenio mendoza blocked unblock follow following teacher web developer writer and game lover sep 16 2017 cmo saber si necesitas una base de datosnosql foto por martin reisch en unsplash si has pasado tiempo con nodejs estars familiarizado con mongodb y si lo tuyo es react native kotlin o hasta angular y vue seguramente ya trabajas con firebase o lo tienes en la cabeza para tu prxima app estas son tecnologas excelentes con un nico inconveniente lo que sucede cuando nuestra experiencia es en bases de datos relacionales o si eres como yo y gateaste con tablas y queries y primary keys es muy probable que esta manera de organizar los datos est arraigada con tu concepto mental de qu es una base de datos una vez que les agarramos el truco el evitar la redundancia normalizar y dems tareas relacionales nos salen tan intuitivamente que nos espantamos al ver nuestros diagramas de cuando ramos principiantes pero cuando se trata de bases de datos no relacionales o efectivamente somos principiantes de nuevo nada de lo que aprendimos sobre el modelo relacional es vlido si venimos de un trasfondo relacional nuestro primer instinto es tratar de adaptar lo que sabemos a este nuevo modelo pero as no solo nos perdemos de sus mejores virtudes sino que podemos perjudicar el producto en el que trabajamos al elegir un modelo de datos incorrecto quieres saber cundo hace falta nosql y cuando es mejor quedarse con una clsica relacional en el resto de este post veremos qu diferencias hay entre ambos modelos y ejemplos prcticos de cuando elegir uno sobre otro sql para referirnos a las bases de datos relacionales nosql para las no relacionales bd para base de datos y entidades para hablar de tablas colecciones diccionarios y dems estructuras que estas bases de datos 1 integridad dedatos la integridad de datos es la garanta de que los datos almacenados mantendrn su exactitud y consistencia a travs del tiempo tu cdigo siempre deber servir mientras t mismo no modifiques su estructura sql las tablas tienen estructuras rgidas donde cada dato tiene un tipo definido no podemos almacenar datos de otro tipo diferente y no se vale ms de un dato en un mismo campo puesto que todos los registros cumplen las mismas reglas si tu cdigo funciona con un solo registro servir con todos los dems nosql hay varios tipos de base de datos nosql pero en general ninguna te exige que definas el tipo de datos que vas a almacenar un da un campo puede ser un nmero y al otro da un string o array o hasta un json ms que saber qu es la data nosql pone mayor prioridad en cmo acceder dicha data qu significa esto que si necesitas que tus datos se mantengan exactos y consistentes a travs del tiempo una base de datos sql te lo garantiza esto es lo ideal en muchos sistemas intolerantes a las fallas donde mientras menos aberturas dejes mejor ejemplo la mayora quiz totalidad del software bancario y aqu sql te cuida las espaldas pero tambin que si tus estructuras de datos son propensas a cambiar el sql te puede perjudicar al imponer una estructura rgida ejemplo si estas en las fases de prototipo o lanzamiento temprano de una app donde los datos que guardas son ms mientras que aadir llaves nuevas a un documento nosql suele ser muy fcil modificar tablas sql puede traer muchos inconvenientes si ya el sistema funciona con cierta estructura y ms an si hablamos de introducir cosas como llaves primarias conste esto ltimo no es necesariamente malo pues te obliga a pensar dos veces antes de cambiar las estructuras de datos ahorrando bugs y modificaciones innecesarias en toda la app foto por negative space en unsplash 2 operaciones atmicas una operacin atmica es cuando haces un cambio que afecta a mltiples entidades de la base de datos al mismo tiempo esto suele acompaarse con el concepto de transacciones decirle a la bd que o cambian todas las tablas que queremos al mismo tiempo o no cambia nada y la base de datos queda intacta famoso rollback todo o sql las bases de datos relacionales tienen atomicidad gracias a que sus tablas estn conectadas y pueden ponerse de acuerdo para no aceptar cambios nuevos hasta que termine una transaccin si tu sistema posee operaciones donde necesitas cambiar datos de varias entidades al mismo tiempo ya es una alerta roja para usar sql pues ests reconociendo que hay relaciones entre los datos y que stas son importantes si adems hablamos de operaciones delicadas procesar una factura donde se suelen actualizar ms cosas por ejemplo el stock de un es casi seguro que la atomicidad te salvar el pellejo de situaciones como que dos personas traten de pagar por el ltimo de un producto al mismo tiempo nosql datos no relacionales no hay relaciones sobre las que hacer una transaccin atmica simplemente cuando quieres hacer cambios en 5 entidades diferentes de frente o detrs de cmaras habr 5 llamadas diferentes a la base de datos una detrs de otra como te podrs imaginar es posible que entre tantos viajes de la data algn otro cliente haga una solicitud a la base de datos que modifique lo mismo que t y se produzca una race condition 2 clientes queriendo tener una versin diferente del mismo dato y esto termina muy mal cuando hablamos de compras reservaciones y cosas as qu significa esto nosql no cuenta con atomicidad y sta es vital para ciertos sistemas la desventaja la atomicidad no es barata para la mquina consume capacidad de procesamiento y afecta el rendimiento de la base de datos pues sta hace el trabajo sucio para garantizar que nadie ms se entrometa en una transaccin cundo elegir nosql la atomicidad no siempre es crucial comparado con una inconsistencia en un estado de cuenta bancaria qu tan crtico es si dos usuarios difieren en la cantidad de likes de un post a veces la velocidad de respuesta es ms importante que la consistencia de datos app mviles caen en y aqu brilla nosql 3 escalabilidad o qu tanto podemos crecer con la base de datos este suele ser un punto controversial cuando hablamos de cantidad de registros que podemos almacenar antes que la bd empiece a dar problemas la realidad depende totalmente de la base de datos especfica que usemos para empezar cuando pensamos en escalabilidad es muy probable que realmente pensemos en escalabilidad vertical aumentar el poder de una mquina para que pueda aguantar una mayor cantidad de datos soluciones sql como mysql microsoft sql server y postgre han probado su poder de escalar verticalmente a travs de los aos pero nosql tambin tiene sus jugadores como hadoop o riak que en sus respectivos campos data y soluciones aguantan datos como una montaa aguantando gotas de lluvia entonces donde hay mayor diferencia en la escalabilidad horizontal es decir en cuntas mquinas diferentes podemos dividir la bd para repartir la carga sql la verdad es que la mayora de soluciones sql tienen buen soporte para escalar verticalmente pero cuando tratas de que la informacin en tu base de datos se mantenga consistente para todos los usuarios los problemas llegan al hablar de miles y millones de registros aun con una mquina muy potente puedes verte obligado a dividir tu base de datos entre diferentes procesadores y hasta servidores ahora las bases de datos distribuidas sql no son un concepto nuevo y compaas como microsoft llevan aos trabajando en ello pero no es algo barato el bolsillo ni para el siempre hay cierto riesgo de presentar inconsistencias pues la bd ahora debe revisar que todo este en orden a travs de diferentes mquinas nosql cuando no tienes la consistencia de datos como prioridad distribuir y replicar tu base de datos en mltiples mquinas es trivial y por eso se considera que el nosql es excelente para bases de datos necesitan escalar horizontalmente ejemplo en big data donde una sola mquina se queda corta sumamente qu significa esto las bases de datos relacionales ya vienen equipadas para crecer verticalmente lo cual es ms que suficiente para empresas pequeas a grandes proyectos personales blogs y dems hasta cierto punto y mientras tengas una buena mquina con la capacidad requerida nosql por el contrario la tiene ms fcil residiendo en muchas mquinas menos potentes al empezar un nuevo proyecto decidirte por distribuir la bd no es algo que se tome a la ligera pues es uno de esos problemas que se te pueden presentar ya con productos exitosos y en expansin no te partas la cabeza si vas empezando para cuando en serio tengas que considerar bases de datos distribuidas sers ms que capaz de decidir qu modelo es el apropiado para tu caso de uso especfico foto por joe neric en unsplash 4 velocidad esto es que tan rpidas son las lecturas y escrituras a la bd una necesidad bsica pero tan importante que puede definir por s sola con qu modelo nos quedamos solo piensa que se resalta en las publicidades de servicios en la nube como la realtime database de firebase sincroniza datos en milisegundos sql las garantas que te dan las relaciones conllevan un precio esto es ms evidente cuando empezamos a hacer consultas con joins involucran mltiples y de repente una bsqueda puede tardar minutos y hasta horas debido a la gran cantidad de datos que est revisando es un problema que se suele aliviar con buen diseo de la bd pero est ah y te morder tarde o temprano nosql mientras que un buen diseo en sql sirve para amortiguar un golpe en nosql determinar que tanto jugo le saques a la velocidad con que viene asumiendo que buscas tus datos de una sola entidad las bases de datos no relacionales suelen contar con mecanismos de bsqueda sumamente rpida para conseguir un dato especfico entre millones qu significa esto que si sabes cmo disear tu base de datos es casi seguro que una nosql bien diseada gane por mucho en velocidad a una sql hacindolas sumamente atractivas para aplicaciones modernas donde los usuarios viven de su plan de datos y donde si tu app no carga en un par de segundos ya piensan en desinstalar volver a google siempre puedes optimizar ambos modelos hasta obtener un rendimiento aceptable pero en nosql puedes disear tu base de datos en funcin a las consultas que hars dndole una ventaja descomunal es aqu cuando entra en juego un factor que suele ser una barrera cuando vienes de sql y es 5 consistencia vs redundancia probablemente la diferencia ms marcada entre ambos modelos y donde ms fcil nos es dejarnos llevar por nuestros conocimientos de sql sql la consistencia de datos es asegurarse de que un nico dato este una nica vez en toda la base de datos y se suele lograr con el proceso de normalizacin la cantidad de datos repetidos en la esto garantiza que por ejemplo si buscas el nombre de alguien el nombre que vers es exactamente el mismo que podran ver tu vecino o alguien en pekn si estn conectados a la misma base de datos igual de importante significa que mientras vayas navegando en tu app si 10 pantallas diferentes cargan un dato las 10 veces ser el mismo dato nosql la redundancia es repetir adrede los datos a conveniencia en varias partes de la bd de por ejemplo si almacenamos datos de una reservacin hotelera guardamos todos los datos de una persona en la entidad persona pero adems guardamos una copia del nombre telfono y dems informacin personal en cada reservacin y posiblemente en cada factura de esta persona si cambian los datos de una persona en persona no necesariamente se reflejar este cambio en las otras entidades esto queda a mano y decisin pero tambin hace que al buscar facturas o reservaciones no tenemos que dar vueltas extra para obtener los datos de la persona qu significa esto algunas aplicaciones necesitan consistencia de datos pero otras prefieren el incremento en velocidad recuerda que el espacio de almacenamiento es barato y solo se abarata ms cada ao pero el procesamiento y los datos mviles an son oro para los usuarios finales tambin al disear bases de datos nosql debes tener siempre en mente que la redundancia est de tu lado muchas veces nos quejamos al utilizar servicios como la realtime database de firebase pues restringen nuestra capacidad para consultar diferentes colecciones al mismo tiempo en realidad estn diseados as para optimizar las consultas rpida y el problema ms comn es que no aprovechamos al mximo la redundancia para poner la informacin que necesitamos en un nico lugar haces una app como youtube y necesitas mostrar junto con cada video el nombre del usuario que lo subi gurdalo en un campo de autor junto a la id del dato completo quieres que se vea el ltimo mensaje enviado en el preview de una sala de chat gurdalo como un campo entre la informacin de la sala de chat y actualiza ste cada vez que se enve un mensaje nuevo sentiste una comezn al leer eso es muy probable que sea tu modelista relacional sufriendo por usar la redundancia de datos a tu favor es quiz lo ms contra intuitivo para quienes venimos de un trasfondo relacional pero piensa que tan seguido suele cambiar una persona datos como su nombre de usuario o telfono ms de una vez es posible pero compara eso con cuantas veces al da esperas que esta informacin sea consultada por tu aplicacin de nuevo hay aplicaciones donde simplemente no te puedes dar el lujo de perder la consistencia de datos de nuevo pero si no es tu caso y prefieres el aumento de velocidad app mviles son buenas piensa en cules datos necesitas mostrarle al usuario ms frecuentemente y planea tus estructuras de datos y redundancias acordemente foto por auskteez tran en unsplash 6 comodidad para el desarrollador este ser el ltimo punto que tocaremos hoy pero tambin puede definir el s o no al momento de decidir con comodidad podemos referirnos a muchas cosas as que ir directo al grano sql la comunidad sql lleva dcadas madurando y esto se traduce no solo en mejores herramientas administrativas sino en estndares mejores definidos mayor documentacin y hasta comunidades ms grandes de desarrolladores listos para ayudarte con tus problemas o unirse a tu equipo de trabajo nosql lo pondr as buena suerte consiguiendo herramientas administrativas como phpmyadmin y de manera gratuita aqu el punto fuerte es la conveniencia factores como que los datos no necesiten tipos o que puedas aprovechar la redundancia hacen ms flexible el desarrollar con nosql si ests prototipando los cambios son ms rpidos y tienen menos consecuencias si sabes qu quieres mostrar a tus usuarios es fcil disear bases de datos especializadas en servir exacta y rpidamente la informacin que quieres qu significa esto que las base de datos nosql te suelen dar ms libertad para experimentar y equivocarte haciendo cambios a diestra y siniestra pero stas son necesidades que no tendrs siempre cuando tienes un sistema mejor definido te har falta contar con buenas herramientas administrativas o saber que hay ms gente ah afuera lista para apoyarte o unirse a tu equipo rpidamente y en esto sql brilla en resumen se puede decir que nosql te da ms facilidades como desarrollador y ventajas a corto plazo mientras que los beneficios de sql los sueles ver cuando va pasando el tiempo y te toca mantener el sistema palabras finales como podrs ver sql en general es ms rgido y por ello puede darte garantas sobre tus datos mientras que nosql te da ms libertades y comodidades sacrificando estas mismas garantas si t necesitas que tus datos se mantengan consistentes y tus transacciones atmicas disminuyendo los errores al mximo tienes datos relacionado s y buscars muchos datos en base a estas relaciones necesitas poder introducir gente al equipo de trabajo rpidamente prefieres algo ya probado y con abundantes herramientas y comunidades detrs ests pensando en una base de datos relaciona l mientras que s la velocidad de lectura y escritura es ms importante que mantener la consistencia no sabes cmo se ver la estructura de tus datos al final y probablemente cambie mucho te es ms fcil adquirir varias mquinas modestas a traves del tiempo que invertir en una sola muy potente prefieres algo fcil de usar como programador que no te exige compromisos y te deje almacenar casi cualquier cosa donde quieras nosql puede ser tu solucin cada modelo es una herramienta y como toda herramienta son buenos para ciertas cosas y para otras no tanto un ltimo factor que debes tomar en cuenta es que ambos modelos pueden coexistir en un mismo sistema te sorprendera cuntas aplicaciones dejan sus datos ms consultados en un almacenamiento nosql que las consultas sean pero al momento de operaciones crticas como procesar pagos llaman a una bd relacional para asegurarse de que nadie salga herido esto lo podemos ver desde usar redis como cach para tu app hasta lo que podemos hacer combinando servicios en la nube como firebase con un backend usando mysql este es mi primer post en medium y se lo dedico a mis alumnos en la materia de base de datos del diplomado de webmaster en la universidad rafael belloso chacn espero haya resuelto sus dudas con respecto a las bases de datos nosql si hay suficiente inters de parte del pblico en el futuro vendrn ms posts sobre desarrollo web bases de datos y dems prximamente podrn ver casos de uso y consejos prcticos para disear bases de datos nosql si te gust este post y lo consideras til deja unos aplausos para ayudar a otras personas a conseguirlo tambin para saber si vali la pena y t para qu estas usando nosql actualmente no dudes en dejar tus dudas y comentarios ms abajo hasta la prxima fuentes nosql vs sql principales diferencias y cundo elegir cada una de ellas el post est disponible tambin en ingls hoy en da empieza a haber una tendencia alcista por la utilizacin de blog pandorafms org sql vs nosql cul debo usar tech blog for developers facilcloud sql es un sistema de gestin de bases de datos relacional multihilo y multiusuario con ms de seis millones de www facilcloud com la integridad de datos una preocupacin creciente cada vez son ms las observaciones deficiencias warning letters o alertas de importacin reportadas durante las www fernandotazon com es nosql database sql web development desarrollo web like what you read give eugenio mendoza a round of applause from a quick cheer to a standing ovation clap to show how much you enjoyed this story 362 7 blocked unblock follow following eugenio mendoza teacher web developer writer and game lover 362 never miss a story from eugenio mendoza when you sign up for medium learn more never miss a story from eugenio mendoza blocked unblock follow get updates 