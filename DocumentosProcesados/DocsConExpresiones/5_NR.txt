 c saber si necesitas una base de datos nosql eugenio mendoza medium homepage become a member sign in get started homepage eugenio mendoza blocked unblock follow following teacher web developer writer and game lover sep 16 2017 c saber si necesitas una base de datos foto por martin reisch en unsplash si has pasado tiempo con nodejs estar s familiarizado con mongodb y si lo tuyo es react native kotlin o hasta angular y vue seguramente ya trabajas con firebase o lo tienes en la cabeza para tu pr app estas son tecnolog excelentes con un inconveniente lo que sucede cuando nuestra experiencia es en bases de datos relacionales o si eres como yo y gateaste con tablas y queries y primary keys es muy probable que esta manera de organizar los datos est arraigada con tu concepto mental de qu es una base de datos una vez que les agarramos el truco el evitar la redundancia normalizar y dem s tareas relacionales nos salen tan intuitivamente que nos espantamos al ver nuestros diagramas de cuando principiantes pero cuando se trata de bases de datos no relacionales o efectivamente somos principiantes de nuevo nada de lo que aprendimos sobre el modelo relacional es v lido si venimos de un trasfondo relacional nuestro primer instinto es tratar de adaptar lo que sabemos a este nuevo modelo pero as no solo nos perdemos de sus mejores virtudes sino que podemos perjudicar el producto en el que trabajamos al elegir un modelo de datos incorrecto quieres saber cu ndo hace falta nosql y cuando es mejor quedarse con una cl sica relacional en el resto de este post veremos qu diferencias hay entre ambos modelos y ejemplos pr cticos de cuando elegir uno sobre otro para referirnos a las bases de datos relacionales para las no relacionales para base de datos y para hablar de tablas colecciones diccionarios y dem s estructuras que estas bases de datos 1 integridad de la integridad de datos es la garant de que los datos almacenados mantendr n su exactitud y consistencia a trav del tiempo tu c siempre deber servir mientras t mismo no modifiques su estructura sql las tablas tienen estructuras r donde cada dato tiene un tipo definido no podemos almacenar datos de otro tipo diferente y no se vale m s de un dato en un mismo campo puesto que todos los registros cumplen las mismas reglas si tu c funciona con un solo registro servir con todos los dem s nosql hay varios tipos de base de datos nosql pero en general ninguna te exige que definas el tipo de datos que vas a almacenar un d un campo puede ser un n y al otro d un string o array o hasta un json m s que saber qu es la data nosql pone mayor prioridad en c acceder dicha data qu significa esto que si necesitas que tus datos se mantengan exactos y consistentes a trav del tiempo una base de datos sql te lo garantiza esto es lo ideal en muchos sistemas intolerantes a las fallas donde mientras menos aberturas dejes mejor ejemplo la mayor quiz totalidad del software bancario y aqu sql te cuida las espaldas pero tambi que si tus estructuras de datos son propensas a cambiar el sql te puede perjudicar al imponer una estructura r ejemplo si estas en las fases de prototipo o lanzamiento temprano de una app donde los datos que guardas son m s mientras que a llaves nuevas a un documento nosql suele ser muy f cil modificar tablas sql puede traer muchos inconvenientes si ya el sistema funciona con cierta estructura y m s a si hablamos de introducir cosas como llaves primarias conste esto no es necesariamente malo pues te obliga a pensar dos veces antes de cambiar las estructuras de datos ahorrando bugs y modificaciones innecesarias en toda la app foto por negative space en unsplash 2 operaciones at una operaci at es cuando haces un cambio que afecta a m entidades de la base de datos al mismo tiempo esto suele acompa con el concepto de decirle a la bd que o cambian todas las tablas que queremos al mismo tiempo o no cambia nada y la base de datos queda intacta famoso todo o sql las bases de datos relacionales tienen atomicidad gracias a que sus tablas est n conectadas y pueden de acuerdo para no aceptar cambios nuevos hasta que termine una transacci si tu sistema posee operaciones donde necesitas cambiar datos de varias entidades al mismo tiempo ya es una alerta roja para usar sql pues est s reconociendo que hay relaciones entre los datos y que son importantes si adem s hablamos de operaciones delicadas procesar una factura donde se suelen actualizar m s cosas por ejemplo el stock de un es casi seguro que la atomicidad te salvar el pellejo de situaciones como que dos personas traten de pagar por el de un producto al mismo tiempo nosql datos no relacionales no hay relaciones sobre las que hacer una transacci at simplemente cuando quieres hacer cambios en 5 entidades diferentes de frente o detr s de c maras habr 5 llamadas diferentes a la base de datos una detr s de otra como te podr s imaginar es posible que entre tantos viajes de la data alg otro cliente haga una solicitud a la base de datos que modifique lo mismo que t y se produzca una condition 2 clientes queriendo tener una versi diferente del mismo dato y esto termina muy mal cuando hablamos de compras reservaciones y cosas as qu significa esto nosql no cuenta con atomicidad y es vital para ciertos sistemas la desventaja la atomicidad no es barata para la m quina consume capacidad de procesamiento y afecta el rendimiento de la base de datos pues hace el trabajo sucio para garantizar que nadie m s se entrometa en una transacci cu ndo elegir nosql la atomicidad no siempre es crucial comparado con una inconsistencia en un estado de cuenta bancaria qu tan cr es si dos usuarios difieren en la cantidad de likes de un post a veces la velocidad de respuesta es m s importante que la consistencia de datos app m caen en y aqu brilla nosql 3 escalabilidad o qu tanto podemos crecer con la base de datos este suele ser un punto controversial cuando hablamos de cantidad de registros que podemos almacenar antes que la bd empiece a dar problemas la realidad depende totalmente de la base de datos espec que usemos para empezar cuando pensamos en escalabilidad es muy probable que realmente pensemos en escalabilidad vertical aumentar el poder de una m quina para que pueda aguantar una mayor cantidad de datos soluciones sql como mysql microsoft sql server y postgre han probado su poder de escalar verticalmente a trav de los a pero nosql tambi tiene sus jugadores como hadoop o riak que en sus respectivos campos data y soluciones aguantan datos como una monta aguantando gotas de lluvia entonces donde hay mayor diferencia en la escalabilidad horizontal es decir en cu ntas m quinas diferentes podemos dividir la bd para repartir la carga sql la verdad es que la mayor de soluciones sql tienen buen soporte para escalar verticalmente pero cuando tratas de que la informaci en tu base de datos se mantenga consistente para todos los usuarios los problemas llegan al hablar de miles y millones de registros aun con una m quina muy potente puedes verte obligado a dividir tu base de datos entre diferentes procesadores y hasta servidores ahora las bases de datos distribuidas sql no son un concepto nuevo y compa como microsoft llevan a trabajando en ello pero no es algo barato el bolsillo ni para el siempre hay cierto riesgo de presentar inconsistencias pues la bd ahora debe revisar que todo este en orden a trav de diferentes m quinas nosql cuando no tienes la consistencia de datos como prioridad distribuir y replicar tu base de datos en m m quinas es trivial y por eso se considera que el nosql es excelente para bases de datos necesitan escalar horizontalmente ejemplo en big data donde una sola m quina se queda corta sumamente r qu significa esto las bases de datos relacionales ya vienen equipadas para crecer verticalmente lo cual es m s que suficiente para empresas peque a grandes proyectos personales blogs y dem s hasta cierto punto y mientras tengas una buena m quina con la capacidad requerida nosql por el contrario la tiene m s f cil residiendo en muchas m quinas menos potentes al empezar un nuevo proyecto decidirte por distribuir la bd no es algo que se tome a la ligera pues es uno de esos problemas que se te pueden presentar ya con productos exitosos y en expansi no te partas la cabeza si vas empezando para cuando en serio tengas que considerar bases de datos distribuidas ser s m s que capaz de decidir qu modelo es el apropiado para tu caso de uso espec foto por joe neric en unsplash 4 velocidad esto es que tan r pidas son las lecturas y escrituras a la bd una necesidad b sica pero tan importante que puede definir por s sola con qu modelo nos quedamos piensa que se resalta en las publicidades de servicios en la nube como la realtime database de firebase sincroniza datos en milisegundos sql las garant que te dan las relaciones conllevan un precio esto es m s evidente cuando empezamos a hacer consultas con involucran m y de repente una b puede tardar minutos y hasta horas debido a la gran cantidad de datos que est revisando es un problema que se suele aliviar con buen dise de la bd pero est ah y te morder tarde o temprano nosql mientras que un buen dise en sql sirve para amortiguar un golpe en nosql determinar que tanto jugo le saques a la velocidad con que viene asumiendo que buscas tus datos de una sola entidad las bases de datos no relacionales suelen contar con mecanismos de b sumamente r pida para conseguir un dato espec entre millones qu significa esto que si sabes c dise tu base de datos es casi seguro que una nosql bien dise gane por mucho en velocidad a una sql haci sumamente atractivas para aplicaciones modernas donde los usuarios viven de su plan de datos y donde si tu app no carga en un par de segundos ya piensan en desinstalar volver a google siempre puedes optimizar ambos modelos hasta obtener un rendimiento aceptable pero en nosql puedes dise tu base de datos en funci a las consultas que har s d ndole una ventaja descomunal es aqu cuando entra en juego un factor que suele ser una barrera cuando vienes de sql y es 5 consistencia vs redundancia probablemente la diferencia m s marcada entre ambos modelos y donde m s f cil nos es dejarnos llevar por nuestros conocimientos de sql sql la consistencia de datos es asegurarse de que un dato este una vez en toda la base de datos y se suele lograr con el proceso de la cantidad de datos en la esto garantiza que por ejemplo si buscas el nombre de alguien el nombre que ver s es exactamente el mismo que podr ver tu vecino o alguien en pek si est n conectados a la misma base de datos igual de importante significa que mientras vayas navegando en tu app si 10 pantallas diferentes cargan un dato las 10 veces ser el mismo dato nosql la redundancia es repetir adrede los datos a conveniencia en varias partes de la bd normalizados por ejemplo si almacenamos datos de una reservaci hotelera guardamos todos los datos de una persona en la entidad pero adem s guardamos una copia del nombre tel y dem s informaci personal en cada y posiblemente en cada de esta persona si cambian los datos de una persona en no necesariamente se reflejar este cambio en las otras entidades esto queda a mano y decisi pero tambi hace que al buscar facturas o reservaciones no tenemos que dar vueltas extra para obtener los datos de la persona qu significa esto algunas aplicaciones necesitan consistencia de datos pero otras prefieren el incremento en velocidad recuerda que el espacio de almacenamiento es barato y solo se abarata m s cada a pero el procesamiento y los datos m a son oro para los usuarios finales tambi al dise bases de datos nosql debes tener siempre en mente que la redundancia est de tu lado muchas veces nos quejamos al utilizar servicios como la realtime database de firebase pues restringen nuestra capacidad para consultar diferentes colecciones al mismo tiempo en realidad est n dise as para optimizar las consultas r pida y el problema m s com es que no aprovechamos al m ximo la redundancia para poner la informaci que necesitamos en un lugar haces una app como youtube y necesitas mostrar junto con cada video el nombre del usuario que lo subi gu rdalo en un campo de junto a la del dato completo quieres que se vea el mensaje enviado en el de una sala de chat gu rdalo como un campo entre la informaci de la sala de chat y actualiza cada vez que se env un mensaje nuevo sentiste una comez al leer eso es muy probable que sea tu relacional sufriendo por usar la redundancia de datos a tu favor es quiz lo m s contra intuitivo para quienes venimos de un trasfondo relacional pero piensa que tan seguido suele cambiar una persona datos como su nombre de usuario o tel s de una vez es posible pero compara eso con cuantas veces al d esperas que esta informaci sea consultada por tu aplicaci de nuevo hay aplicaciones donde simplemente no te puedes dar el lujo de perder la consistencia de datos de nuevo pero si no es tu caso y prefieres el aumento de velocidad app m son buenas piensa en cu les datos necesitas mostrarle al usuario m s frecuentemente y planea tus estructuras de datos y redundancias acordemente foto por auskteez tran en unsplash 6 comodidad para el desarrollador este ser el punto que tocaremos hoy pero tambi puede definir el o no al momento de decidir con comodidad podemos referirnos a muchas cosas as que ir directo al grano sql la comunidad sql lleva d madurando y esto se traduce no solo en mejores herramientas administrativas sino en est ndares mejores definidos mayor documentaci y hasta comunidades m s grandes de desarrolladores listos para ayudarte con tus problemas o unirse a tu equipo de trabajo nosql lo pondr as buena suerte consiguiendo herramientas administrativas como phpmyadmin y de manera gratuita aqu el punto fuerte es la conveniencia factores como que los datos no necesiten tipos o que puedas aprovechar la redundancia hacen m s flexible el desarrollar con nosql si est s prototipando los cambios son m s r pidos y tienen menos consecuencias si sabes qu quieres mostrar a tus usuarios es f cil dise bases de datos especializadas en servir exacta y r pidamente la informaci que quieres qu significa esto que las base de datos nosql te suelen dar m s libertad para experimentar y equivocarte haciendo cambios a diestra y siniestra pero son necesidades que no tendr s siempre cuando tienes un sistema mejor definido te har falta contar con buenas herramientas administrativas o saber que hay m s gente ah afuera lista para apoyarte o unirse a tu equipo r pidamente y en esto sql brilla en resumen se puede decir que nosql te da m s facilidades como desarrollador y ventajas a corto plazo mientras que los beneficios de sql los sueles ver cuando va pasando el tiempo y te toca mantener el sistema palabras finales como podr s ver sql en general es m s r y por ello puede darte garant sobre tus datos mientras que nosql te da m s libertades y comodidades sacrificando estas mismas garant si t necesitas que tus datos se mantengan consistentes y tus transacciones at disminuyendo los errores al m ximo tienes datos relacionado s y buscar s muchos datos en base a estas relaciones necesitas poder introducir gente al equipo de trabajo r pidamente prefieres algo ya probado y con abundantes herramientas y comunidades detr s est s pensando en una base de datos relaciona l mientras que s la velocidad de lectura y escritura es m s importante que mantener la consistencia no sabes c se ver la estructura de tus datos al final y probablemente cambie mucho te es m s f cil adquirir varias m quinas modestas a traves del tiempo que invertir en una sola muy potente prefieres algo f cil de usar como programador que no te exige compromisos y te deje almacenar casi cualquier cosa donde quieras nosql puede ser tu soluci cada modelo es una herramienta y como toda herramienta son buenos para ciertas cosas y para otras no tanto un factor que debes tomar en cuenta es que ambos modelos pueden coexistir en un mismo sistema te sorprender cu ntas aplicaciones dejan sus datos m s consultados en un almacenamiento nosql que las consultas sean r pero al momento de operaciones cr como procesar pagos llaman a una bd relacional para asegurarse de que nadie salga herido esto lo podemos ver desde usar redis como para tu app hasta lo que podemos hacer combinando servicios en la nube como firebase con un backend usando mysql este es mi primer post en medium y se lo dedico a mis alumnos en la materia de de datos del diplomado de webmaster en la universidad rafael belloso chac espero haya resuelto sus dudas con respecto a las bases de datos nosql si hay suficiente inter de parte del p en el futuro vendr n m s posts sobre desarrollo web bases de datos y dem s pr podr n ver casos de uso y consejos pr cticos para dise bases de datos nosql si te gust este post y lo consideras deja unos aplausos para ayudar a otras personas a conseguirlo tambi y para saber si vali la pena y t para qu estas usando nosql actualmente no dudes en dejar tus dudas y comentarios m s abajo hasta la pr fuentes nosql vs sql principales diferencias y cu ndo elegir cada una de ellas el post est disponible tambi en ingl hoy en d empieza a haber una tendencia alcista por la utilizaci de blog pandorafms org sql vs nosql cu l debo usar tech blog for developers facilcloud sql es un sistema de gesti de bases de datos relacional multihilo y multiusuario con m s de seis millones de www facilcloud com la integridad de datos una preocupaci creciente cada vez son m s las observaciones deficiencias warning letters o alertas de importaci reportadas durante las www fernandotazon com es nosql database sql web development desarrollo web like what you read give eugenio mendoza a round of applause from a quick cheer to a standing ovation clap to show how much you enjoyed this story 362 7 blocked unblock follow following eugenio mendoza teacher web developer writer and game lover 362 never miss a story from eugenio mendoza when you sign up for medium learn more never miss a story from eugenio mendoza blocked unblock follow get updates 