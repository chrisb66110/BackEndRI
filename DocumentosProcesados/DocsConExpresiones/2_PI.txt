 puntero inteligente wikipedia la enciclopedia libre puntero inteligente de wikipedia la enciclopedia libre ir a la navegaci ir a la b en programaci un puntero inteligente smart es un tipo abstracto de datos que simula el comportamiento de un puntero corriente pero a nuevas caracter adicionales como recolector de basura autom tico y comprobador de l estas caracter adicionales tienen como objetivo reducir errores causados por el mal uso de punteros manteniendo la eficiencia los punteros inteligentes suelen llevar un registro de los objetos a los que apunta con el prop de gestionar la memoria el mal uso de los punteros suele ser la mayor fuente de errores asignaciones constantes liberaci de memoria y la referencia que debe ser realizada por un programa usando punteros introduce el riesgo de p de memoria los punteros inteligentes intentan prevenir las p de memoria liberando autom ticamente los recursos cuando un puntero el de una serie de a un objeto es destruido porque por ejemplo se sale del mbito el objeto apuntado tambi se elimina existen varios tipos de punteros inteligentes algunos trabajan llevando la cuenta de referencias otros mediante asignaci de un objeto a un puntero si el lenguaje soporta recolector de basura autom tico ejemplo java el uso de los punteros inteligentes es innecesario en c los punteros inteligentes pueden ser implementados como una que imita mediante sobrecarga de operadores el comportamiento de los punteros tradicionales pero proporcionando algoritmos de administaci de memoria los punteros inteligentes pueden facilitar la programaci intencional expresando el uso de un puntero en su propio tipo por ejemplo si una funci de c devuelve un puntero no hay forma de saber cuando se debe liberar la memoria cuando se ha terminado con el uso de la informaci algun function qu se deber hacer con el resultado tradicionalmente esto se habr resuelto con comentarios pero esto puede ser propenso a errores devolviendo un auto de c auto algun funcion la funci hace expl que el tenga la propiedad del resultado y adem s si no se hace nada no se filtrar memoria del mismo modo si la intenci es devolver un puntero a un objeto gestionado en otros lugares la funci podr devolver una referencia algun funcion 1 punteros inteligentes en boost 1 1 scoped pointer 1 2 shared pointer 2 enlaces externos punteros inteligentes en boost editar la biblioteca boost de c nos ofrece varios tipos de punteros inteligentes los m s importantes son scoped pointer puntero no copiable shared pointer puntero copiable scoped pointer editar un scoped pointer es una clase de puntero inteligente que no puede copiarse por lo que solo puede existir un punto de acceso al objeto que apunta cuando el puntero sale del mbito el objeto se destruye y la memoria se libera sintaxis boost scoped miclase mipuntero new miclase 1 mipuntero reset new miclase 2 se puede acceder al contenido usando el operador acceder a la direcci con y acceder al puntero en bruto con el m ejemplo using namespace std boost scoped class elemento static int counter int n public elemento n counter cout creando elemento n endl void lanzar const char msg cout elemento n says msg endl virtual elemento cout so long elemento n endl int elemento counter 0 int main int argc char argv cout inicio del endl boost scoped elemento mielemento new elemento mielemento lanzar mensaje desde myfun elemento classicpointer new elemento classicpointer lanzar mensaje del elemento con puntero cl delete classicpointer necesario borrarlo manualmente cout fin del endl boost scoped string ptrcadena ptrcadena reset new string cout longitud de cadena ptrcadena length endl cout ptrcadena endl return 0 shared pointer editar un shared pointer es un tipo de puntero inteligente que guarda un contador de referencias al objeto al que apunta cada vez que se hace una copia del puntero se aumenta el contador cuando se destruye uno de los shared pointer el contador disminuye cuando el contador llega a cero quiere decir que no hay m s punteros apuntando al objeto por lo que este puede destruirse y liberar la memoria que ocupa todo esto se hace de forma transparente al usuario sintaxis boost shared miclase mipuntero new miclase 1 boost shared miclase otropuntero mipuntero mipuntero reset new miclase 2 ejemplo using namespace std int tabulados boost shared string tab return string tabulados struct observado observado cout tab creando endl observado cout tab borrando endl struct mirador boost shared observado fan mirador cout tab creando endl mirador cout tab borrando endl void popular mirador mirador boost shared observado o new observado fan o fan o int main int argc char argv tabulados 0 cout endl tabulados cout tab inicio del primer endl mirador tabulados cout tab inicio del segundo endl mirador popular cout tab fin del segundo endl tabulados cout tab final del primer endl tabulados cout endl return 0 enlaces externos editar cap de muestra smart pointers del libro modern c design generic programming and design patterns applied por andrei alexandrescu addison wesley 2001 c de ejemplo countptr hpp del libro the c standard library a tutorial and reference por nicolai m josuttis art smart pointers in boost art the new c pointers por herb sutter smart pointers what why which por yonat sharon smart pointers overview por john m dlugosz yasper library otra implementaci de punteros inteligentes en c smart pointers en delphi de https es wikipedia org w index php title oldid categor programaci tipos de datos men de navegaci herramientas personales no has accedido discusi contribuciones crear una cuenta acceder espacios de nombres art discusi variantes vistas leer editar ver historial m s buscar navegaci portada portal de la comunidad actualidad cambios recientes p ginas nuevas p gina aleatoria ayuda donaciones notificar un error imprimir exportar crear un libro descargar como pdf versi para imprimir herramientas lo que enlaza aqu cambios en enlazadas subir archivo p ginas especiales enlace permanente informaci de la p gina elemento de wikidata citar esta p gina en otros idiomas tina deutsch english fran italiano polski portugu editar enlaces esta p gina se edit por vez el 3 jun 2018 a las 10 36 el texto est disponible bajo la licencia creative commons atribuci compartir igual 0 pueden aplicarse cl usulas adicionales al usar este sitio usted acepta nuestros t de uso y nuestra pol de privacidad es una marca registrada de la fundaci wikimedia inc una organizaci sin nimo de lucro pol de privacidad acerca de wikipedia limitaci de responsabilidad desarrolladores declaraci de cookies versi para m 