 c por qu no debera usar referencias a punteros inteligentes coredump uno navegacin de palanca coredump uno preguntas etiquetas aqu podra ser tu publicidad por qu no debera usar referencias a punteros inteligentes votos 24 recuerdo leer en alguna parte que el uso de referencias a punteros inteligentes puede causar daos en la memoria esto se debe simplemente al uso de la referencia del puntero inteligente despus de su destruccin o el recuento de referencias se estropea gracias por aclararlo c smart pointers publicado el 07 10 2008 a las 04 41 fuente por usuario superpolock 6 respuestas votos 14 asumiendo que ests hablando de shared aqu esto se debe simplemente al uso de la referencia del puntero inteligente despus de su destruccin esta es una buena respuesta es posible que no sepa absolutamente la vida til del puntero a la que se refiere su referencia tambin para evitar esto querr ver boost weak no participa en el recuento de referencias cuando necesitas usarlo te da un shared que desaparece una vez que hayas terminado con l tambin le permitir saber cundo se ha recopilado el puntero al referido de la documentacin de weak la plantilla de la clase weak almacena una para un objeto que ya est administrado por un shared para acceder al objeto un weak se puede convertir a un shared utilizando el constructor shared o el bloqueo de funcin miembro cuando el ltimo shared del objeto desaparece y el objeto se elimina el intento de obtener un shared de las instancias weak que hacen referencia al objeto eliminado fallar el constructor arrojar una excepcin de tipo boost bad y weak lock devolver un shared vaco tenga en cuenta que el mtodo caducado tambin le indicar si su ptr an est activo respondida el 07 10 2008 a las 04 44 fuente por usuario doug t aqu podra ser tu publicidad votos 5 cuando se utilizan punteros inteligentes cualquier objeto de gestin de se cuenta con los comportamientos definidos en el constructor destructor para gestionar refs derefs locks unlocks como resultado esos tipos de objetos deben ser objetos verdaderos para funcionar correctamente cuando se utilizan referencias a tales objetos se est pasando por alto el mecanismo pidiendo un respondida el 07 10 2008 a las 05 08 fuente por usuario dan hewett votos 3 todava hay muchos casos en los que una referencia a un puntero inteligente es una buena idea un ejemplo obvio es el mtodo de asignacin de la clase de puntero inteligente que acepta una referencia a otro puntero inteligente como su parmetro hacer un mtodo que acepte una referencia de puntero inteligente significa que el parmetro no incrementa la cuenta de referencia interna del puntero inteligente esto puede mejorar el rendimiento pero probablemente no mucho adems hay muchas cosas que el mtodo no puede hacer con la referencia o con el puntero inteligente original si sabes lo que son estas cosas y las evitas pasar por referencia funciona muy bien por supuesto el propsito de los indicadores inteligentes es evitar tener que saber estas cosas adems si tiene un mtodo que modificar el valor de un parmetro de puntero inteligente se requiere pasar como referencia como ocurre con cualquier otro tipo respondida el 07 10 2008 a las 05 48 fuente por usuario jeff b votos 1 la parte de los punteros inteligentes es administrada por los constructores destructores operadores de asignacin y otras funciones de la clase de puntero inteligente al usar una referencia est eludiendo estas operaciones no se llamar al constructor cuando se inicialice su referencia y no se llamar al destructor cuando su referencia quede fuera del alcance en esencia una referencia a un puntero inteligente es un puntero tonto con todos los riesgos y trampas que este ltimo implica respondida el 07 10 2008 a las 05 49 fuente por usuario johnmcg votos 0 pasando una referencia a un puntero inteligente en una funcin es perfectamente seguro y es una buena idea el objeto puede desaparecer pero el puntero inteligente no va a ser sentado all diciendo nulo al menos hasta que se devuelve la funcin es la mejor manera de poner un alias para un puntero inteligente dentro de su alcance si utiliza una referencia con un modificador const en lo que se refiere a continuacin usted tiene una referencia de la observacin inteligente const smart es interesante y til la const le impide utilizar la referencia decir anular el puntero inteligente y eliminar el objeto pero no detiene el puntero inteligente original del mismo y anulando su referencia reflejar ese cambio volviendo una referencia a puntero inteligente de una funcin es pidiendo todo tipo de problemas respondida el 01 10 2013 a las 03 10 fuente por usuario john morrison votos 0 tenemos smartpointers personalizados y siempre tenemos el hbito de pasar un const refsomething no incrementa ni disminuye el puntero inteligente y como tal y ms importante an se evitan las llamadas a interlockedincrement decrement que a su vez evita una valla de memoria y todas las cosas que lo acompaan bloqueo de bus invalidacin de cach respondida el 07 10 2008 a las 07 14 fuente por usuario qbziz aqu podra ser tu publicidad licensed under cc by sa 3 0 with attribution required 