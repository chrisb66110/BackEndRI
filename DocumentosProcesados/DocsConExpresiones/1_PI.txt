 punteros inteligentes este sitio utiliza cookies para anlisis y para mostrar contenido y anuncios personalizados al continuar navegando por este sitio aceptas este uso ms informacin developer network developer network developer suscripciones a msdn obtener herramientas descargas visual studio sdk software de prueba descargas gratuitas recursos de office recursos de sharepoint server 2013 recursos de sql server 2014 express recursos de windows server 2012 programas suscripciones administradores estudiantes microsoft imagine socios estudiantes de microsoft isv nuevas empresas eventos comunidad magazine foros blogs channel 9 documentacin api y referencia centros de desarrollo ejemplos contenido retirado lo sentimos el contenido solicitado se ha quitado ser redirigido automticamente en 1 segundo visual c lenguaje c y bibliotecas estndar aqu est otra vez c aqu est otra vez c punteros inteligentes punteros inteligentes punteros inteligentes compatibilidad con las caractersticas de c 14 17 sistema de tipos de c inicializacin uniforme y constructores de delegacin duracin de objetos y administracin de recursos recursos propios de los objetos punteros inteligentes cmo crear y usar instancias de unique cmo crear y usar instancias de shared cmo crear y usar instancias de weak cmo crear y usar instancias de ccomptr y ccomqiptr pimpl para encapsulacin en tiempo de compilacin contenedores algoritmos formato de cadena y de e s controlar errores y excepciones portabilidad en los lmites de abi toc collapse the table of content expand the table of content esta documentacin est archivada y no tiene mantenimiento se recomienda usar visual studio 2017 descargar ahora esta documentacin est archivada y no tiene mantenimiento punteros inteligentes visual studio 2015 otras versiones visual studio 2013 visual studio 2012 para obtener la documentacin ms reciente de visual studio 2017 rc consulte documentacin de visual studio 2017 rc en la programacin del lenguaje c actual la biblioteca estndar incluye punteros inteligentes que se utilizan para asegurarse de que los programas estn libres de memoria y de prdidas de recursos y son seguros ante excepciones usos de los punteros inteligentes los punteros inteligentes se definen en el espacio de nombres std del archivo de encabezado son cruciales en la expresin de programacin raii o resource acquisition is initialialization el objetivo principal de esta expresin es asegurarse de que la adquisicin de recursos ocurre al mismo tiempo que se inicializa el objeto de manera que todos los recursos del objeto se creen y se dispongan en una sola lnea de cdigo en la prctica el principio bsico raii consiste en proporcionar la propiedad de cualquier recurso asignado por montn ejemplo memoria asignada dinmicamente o identificadores de objetos del a un objeto asignado a la pila cuyo destructor contiene cdigo para eliminar o liberar el recurso adems de cualquier cdigo asociado de limpieza en la mayora de los casos cuando se inicializa un puntero o un identificador de recursos sin formato para apuntar a un recurso real el puntero se pasa inmediatamente a un puntero inteligente en el lenguaje c actual los punteros sin formato se utilizan nicamente en pequeos bloques de cdigo de mbito limitado bucles o funciones auxiliares donde el rendimiento es crucial y no hay ninguna posibilidad de confusin sobre la propiedad en el ejemplo siguiente se compara una declaracin de puntero sin formato con una declaracin de puntero inteligente c copiar void using a raw pointer not recommended psong new on l use psong don t forget to delete delete psong void declare a smart pointer on stack and pass it the raw pointer unique new on l use wstring s duration is deleted automatically here como se muestra en el ejemplo un puntero inteligente es una plantilla de clase que se declara en la pila y se inicializa con un puntero sin formato que apunta a un objeto asignado por montn una vez que se inicializa el puntero inteligente se convierte en propietario del puntero sin formato esto significa que el puntero inteligente es responsable de eliminar la memoria que el puntero sin formato especifica el destructor del puntero inteligente contiene la llamada de eliminacin y dado que el puntero inteligente se declara en la pila su destructor se invoca cuando el puntero inteligente sale del mbito incluso si se produce una excepcin en alguna parte que se encuentre ms arriba en la pila para acceder al puntero encapsulado utilice los conocidos operadores de puntero y que la clase del puntero inteligente sobrecarga para devolver el puntero sin formato encapsulado la expresin del puntero inteligente de c se asemeja a la creacin de objetos en lenguajes como se crea el objeto y despus se permite al sistema que se ocupe de eliminarlo en el momento correcto la diferencia es que ningn recolector de elementos no utilizados independiente se ejecuta en segundo plano la memoria se administra con las reglas estndar de mbito de c de modo que el entorno en tiempo de ejecucin es ms rpido y eficaz importante cree siempre punteros inteligentes en una lnea de cdigo independiente nunca en una lista de parmetros para que no se produzca una prdida de recursos imperceptible debido a algunas reglas de asignacin de la lista de parmetros en el ejemplo siguiente se muestra cmo se puede utilizar un tipo de puntero inteligente unique de la biblioteca de plantillas estndar para encapsular un puntero a un objeto grande c copiar class public void void const void create the object and pass it to a smart pointer std unique new call a method on the object plarge pass a reference to a method plarge is deleted automatically when function block goes out of scope en el ejemplo se muestran los pasos bsicos siguientes para utilizar punteros inteligentes declare el puntero inteligente como variable automtica utilice la expresin new o malloc en el propio puntero en el parmetro de tipo especifique el tipo al que apunta el puntero encapsulado pase un puntero sin formato al objeto new ed en el constructor de puntero inteligente funciones de utilidad o constructores de puntero inteligente hacen esto por usted utilice los operadores sobrecargados y para tener acceso al objeto deje que el puntero inteligente elimine el objeto los punteros inteligentes estn diseados para ser lo ms eficaces posible tanto en trminos de memoria como de rendimiento por ejemplo el nico miembro de datos de unique es el puntero encapsulado esto significa que unique tiene exactamente el mismo tamao que ese puntero cuatro u ocho bytes el acceso al puntero encapsulado a travs del puntero inteligente sobrecargado y los operadores no es mucho ms lento que el acceso directo a los punteros sin formato los punteros inteligentes tienen sus propias funciones miembro a las que se accede mediante la notacin punto por ejemplo algunos punteros inteligentes de stl tienen una funcin miembro de restablecimiento que libera la propiedad del puntero esto es til cuando se quiere liberar la memoria que es propiedad del puntero inteligente antes de que el puntero inteligente salga del mbito tal y como se muestra en el ejemplo siguiente c copiar void create the object and pass it to a smart pointer std unique new call a method on the object plarge free the memory before we exit function block plarge do some other work los punteros inteligentes suelen proporcionar un mecanismo para acceder directamente al puntero sin formato los punteros inteligentes stl tienen una funcin miembro de get con este propsito y ccomptr tiene un miembro de clase p pblico si proporciona acceso directo al puntero subyacente puede utilizar el puntero inteligente para administrar la memoria en el propio cdigo y continuar pasando el puntero sin formato en un cdigo que no admita punteros inteligentes c copiar void create the object and pass it to a smart pointer std unique new call a method on the object plarge pass raw pointer to a legacy api clases de punteros inteligentes en la seccin siguiente se resumen los distintos tipos de punteros inteligentes disponibles en el entorno de programacin de windows y se describe cundo utilizarlos punteros inteligentes de la biblioteca estndar de c utilice estos punteros inteligentes como primera opcin para encapsular punteros a los objetos estndar de c unique permite exactamente un nico propietario del puntero subyacente utilice esta opcin como predeterminada para los objetos poco a menos que sepa con certeza que necesita un objeto shared puede moverse a un nuevo propietario pero no se puede copiar ni compartir sustituye a auto que est desusado comparado con boost scoped unique es pequeo y eficaz el tamao es un puntero y admite referencias rvalue de insercin y extraccin rpidas en colecciones stl archivo de encabezado para obtener ms informacin vea cmo crear y usar instancias de unique y unique shared puntero inteligente con recuento de referencias utilcelo cuando desee asignar un puntero sin formato a varios propietarios por ejemplo cuando devuelve una copia de un puntero desde un contenedor pero desea conservar el original el puntero sin formato no se elimina hasta que todos los propietarios de shared han salido del mbito o de lo contrario han renunciado a la propiedad el tamao es dos punteros uno para el objeto y otro para el bloque de control compartido que contiene el recuento de referencias archivo de encabezado para obtener ms informacin vea cmo crear y usar instancias de shared y shared weak puntero inteligente de caso especial para usarlo junto con shared weak proporciona acceso a un objeto que pertenece a una o varias instancias de shared pero no participa en el recuento de referencias utilcelo cuando desee observar un objeto pero no quiere que permanezca activo es necesario en algunos casos para interrumpir las referencias circulares entre instancias de shared archivo de encabezado para obtener ms informacin vea cmo crear y usar instancias de weak y weak punteros inteligentes para objetos com clsica de cuando trabaje con objetos com encapsule los punteros de interfaz en un tipo de puntero inteligente adecuado active template library define varios punteros inteligentes para propsitos diferentes tambin puede usar el tipo de puntero inteligente que el compilador utiliza cuando crea clases contenedoras de archivos tlb es la mejor opcin si no desea incluir los archivos de encabezado atl ccomptr class utilice esta opcin a menos que no puede usar atl realiza el recuento de referencias mediante los mtodos addref y de release para obtener ms informacin vea cmo crear y usar instancias de ccomptr y ccomqiptr ccomqiptr class se parece a ccomptr pero tambin proporciona la sintaxis simplificada para llamar a queryinterface en objetos com para obtener ms informacin vea cmo crear y usar instancias de ccomptr y ccomqiptr ccomheapptr class puntero inteligente a objetos que utilizan cotaskmemfree para liberar memoria ccomgitptr class puntero inteligente para las interfaces que se obtienen de la tabla de interfaz global se parece a ccomqiptr en funcionalidad pero no depende de los encabezados atl punteros inteligentes atl para objetos poco adems de punteros inteligentes para los objetos com atl tambin define punteros inteligentes y colecciones de punteros inteligentes para objetos estndar de c en la programacin clsica de windows estos tipos son alternativas tiles a las colecciones stl especialmente cuando no es necesaria la portabilidad de cdigo o cuando no se quiere mezclar los modelos de programacin de stl y atl cautoptr class puntero inteligente que exige una propiedad nica al transferir la propiedad en la copia puede compararse con la clase std auto desusada cheapptr class puntero inteligente para objetos asignados mediante la funcin malloc de c cautovectorptr class puntero inteligente para matrices que se asignan mediante cautoptrarray class clase que encapsula una matriz de elementos cautoptr cautoptrlist class clase que encapsula los mtodos para manipular una lista de nodos de cautoptr vea tambin aqu est otra vez c referencia de lenguaje c biblioteca estndar de c informacin general administracin de memoria en c mostrar heredado protegido imprimir exportar 0 imprimir compartir en este artculo le resulta til esta pgina s no tiene comentarios adicionales caracteres restantes 1500 enviar pasar por alto gracias agradecemos mucho su ayuda centros de desarrollo windows office visual studio microsoft azure ms recursos de aprendizaje microsoft virtual academy channel 9 msdn magazine comunidad foros blogs codeplex soporte tcnico autoasistencia programas bizspark empresas microsoft imagine microsoft en la educacin espaa boletn privacidad y cookies trminos de uso marcas comerciales 2018 microsoft 2018 microsoft 