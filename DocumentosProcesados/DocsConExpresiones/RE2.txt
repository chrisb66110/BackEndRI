 unity manual optimizaciones de renderizado manual scripting api unity com version 5 3 switch to 5 idioma espaol english espaol i nnn manual de unity manual de unity indicaciones especficas de plataforma lista de verificacin para desarrolladores en mviles gua pr ctica para la optimizacin en mviles optimizaciones de renderizado mtodos de scripting y gameplay optimizando scripts optimizaciones de renderizado esta seccin introduce los tecnicismos de la optimizacin del renderizado muestra cmo bake los resultados de la iluminacin para un mejor rendimiento y cmo los desarrolladores de shadowgun lograron texturas de alto contraste con una iluminacin baked para hacer que su juego se viera genial si usted est mirando por informacin en general acerca de cmo un juego mvil optimizado se ve revise la p gina graphics methods vulvase artstico a veces optimizar el renderizado en su juego requiere algo de trabajo sucio toda la estructura que unity proporciona hace que sea f cil comenzar a trabajar r pido pero si usted requiere una fidelidad en hardware limitado de alta categora hacer las cosas por usted mismo y soslayando la estructura es la manera de ir proporciona que usted pueda introducir un cambio clave estructural que hace que las cosas sean m s r pido sus herramientas de eleccin son scripts del editor shaders simples y una produccin de arte pasado de moda cmo entrar debajo del capote primero que todo revise esto introduccin a cmo los shaders est n escritos shaders integrados examine el cdigo fuente de los shaders integrados a menudo si usted quiere hacer que un nuevo shader haga algo diferente usted lo puede lograr al tomar las partes de dos shaders ya existentes y colocarlos juntos depuracin del surface shader debug un cg shader es generado de cada surface shader y luego compilado completamente desde ah si usted agrega debug a la parte arriba de su surface shader cuando usted abra el shader compilado va el inspector usted ver el cdigo cg intermediario esto es til para inspeccionar cmo una parte especifica de un shader es en realidad calculado y puede tambin ser de gran ayuda para agarrar ciertos aspectos que usted quiera de un surface shader y luego aplicarlos a un shader cg shader incluye los archivos mucho cdigo ayuda de shader es incluido en cada shader y por lo usual no es utilizado pero esto es por qu a veces usted ver shaders llamar funciones como worldreflectionvector que no parecen estar definidos en cualquier parte unity tiene varios archivos incluidos de shaders integrados que contienen estas funciones de ayuda para encontrar una funcin en especifico usted necesitar buscar a travs de todos los diferentes includes estos archivos son una parte importante de la estructura interna que unity utiliza para que sea f cil escribir shaders los archivos proporcionan cosas como sombras en tiempo real diferentes tipos de luz lightmaps y soporte multi plataforma documentacin de hardware hardware and best practices for writing shaders tenga en cuenta que nosotros vamos a sugerir ser m s agresivos con la precisin de los puntos flotantes sin embargo shadowgun con profunidad shadowgun es un logro gr fico excelente considerando el hardware en el que corre mientras que la calidad del arte parece ser la clave al rompe cabeza hay un par te trucos para lograr tal calidad que los programadores pueden lograr para maximizar su potencial artstico en la p gina de graphics methods nosotros utilizamos la estatua de oro en shadowgun como un ejemplo de una optimizacin genial en vez de utilizar un mapa normal para darle a su estatua algo de definicin solida ellos simplemente baked el detalle de la iluminacin a la textura aqu nosotros vamos a mostrarle cmo y por qu usted debera utilizar una tcnica similar en su propio juego cdigo shader para en tiempo real vs estatua dorada baked this is the pixel shader code for drawing normal mapped specular highlights on static lightmapped geometry 5 texture reads lots of instructions surfaceoutput o fixed4 tex = in uv_ fixed4 c = tex _color o albedo = c rgb o gloss = tex a o specular = _shininess o normal = in uv_ float3 worldrefl = worldreflectionvector o fixed4 reflcol = texcube reflcol = tex a o emission = reflcol rgb _reflectcolor rgb o alpha = reflcol a _reflectcolor a fixed atten = light_ fixed4 c = 0 half3 speccolor fixed4 lmtex = in lmap fixed4 lmindtex = in lmap const float3x3 unity_dirbasis = 0 0 0 0 0 0 0 0 0 0 half3 lm = decodelightmap half3 scaleperbasisvector = decodelightmap half3 normalinrnmbasis = saturate o lm = dot return this is the pixel shader code for lighting which is baked into the texture 2 texture reads very few instructions fixed4 c = tex i uv c xyz += i _reflectioncolor c a return c render to texel la luz en tiempo real es en realidad de mayor calidad pero el aumento de rendimiento de una versin baked es masivo entonces cmo se hace esto una herramienta del editor llamada render to texel fue creada para este propsito este bake la luz a la textura a travs del siguiente proceso transforme la tangente del espacio del normal map a espacio del mundo va script cree un mapa de posicin del espacio del mundo va script renderice a textura un pase de pantalla completa de una textura entera utilizando dos mapas previos con un pase adicional por luz promedie resultados de varios puntos panor micos para producir algo que se ve plausibles con todo alrededor o al menos de unos ngulos de vista comunes en su juego esto es cmo las mejoras optimizaciones gr ficas funciona ellos eluden toneladas de c lculos al realizarlas en el editor o antes de que el juego corra en general esto es lo que usted quiere hacer cree algo que se ve genial no se preocupe por el rendimiento utilice herramientas como el lightmapper de unity y extensiones del editor como render to texel y sprite packer para bake a algo que sea muy simple de renderizar hacer sus propias herramientas es la mejor manera de hacer esto usted puede crear las herramientas perfectas que encajen a cualquier problema que su juego presente cree shaders y scripts que modulan su output baked para darle algo de brillo un efecto llamativo para crear una ilusin de una luz din mica concepto de frecuencia de luz tal como el bass y treble de una pista de audio las im genes tambin tienen componentes de alta frecuencia y baja frecuencia y cuando usted est renderizando es mejor manejarlas de maneras diferentes similar a cmo los estreos utilizan subwoofers y tweeters para producir un sonido de cuerpo completo una manera de visualizar las diferentes frecuencias de una imagen es utilizar el filtro high pass en photoshop filters other high pass si usted ha hecho trabajo de audio antes usted reconocer el nombre high pass esencialmente lo que hace es cortar todas las frecuencias menores que x el par metro que usted pase al filtro para im genes un gaussian blur es equivalente al low pass esto aplica a las gr ficas en tiempo real ya que la frecuencia es una buena manera de separar cosas y determinar cmo manejar qu por ejemplo en un entorno lightmapped la imagen final es obtenida por lo compuesto del lightmap el cual es baja frecuencia y las texturas que son de alta frecuencia en shadowgun la luz de baja frecuencia es aplicada al personaje r pidamente con unos light probes de la luz de alta frecuencia es falsificadaa travs del uso de un shader bumpmapped simple con una direccin de luz arbitrara en general al utilizar diferentes mtodos para renderizar diferentes frecuencias de luz por ejemplo baked vs dynamic por objeto vs por nivel por pixel vs por vrtice etc usted puede crear cuerpos completos de imagen en hardware limitado opciones de estilo a parte por lo general es una buena idea intentar tener una fuerte variacin de colores o valores en altas y bajas frecuencias frecuencia en pr ctica descomposicin de shadowgun fila de arriba ultra low frequency specular vertex light un canal alpha de alta frecuencia un lightmap de baja frecuencia un albedo de alta frecuencia fila de la mitad specular vertex light alpha detalles aditivos de alta frecuencia lightmap canal de color fondo final sum tenga en cuenta usualmente estas descomposiciones se refieren a los pasos e un renderizador deferred pero este no es el caso aqu todo esto es hecho en un solo pass estos son los dos shaders relevantes con los cuales esta composicin se baso lightmapped con virtual gloss per vertex additive shader environment virtual gloss per vertex additive properties _maintex gloss = _maintexmipbias range 10 = 0 0 _specoffset offset from = 10 2 _specrange = 20 _speccolor = 5 0 5 0 5 _shininess range 01 = 0 078125 _ = 0 0 subshader tags = = lod 100 cginclude sampler _maintex float4 _maintex_st samplercube _refltex lightmap_off float4 unity_lightmapst sampler unity_lightmap float _maintexmipbias float3 _specoffset float _specrange float3 _speccolor float _shininess float4 _scrollingspeed struct v float4 pos sv_position float2 uv texcoord0 lightmap_off float2 lmap texcoord1 fixed3 spec texcoord2 v vert v o o pos = v o uv = v texcoord + _time float3 viewnormal = v float4 viewpos = v float3 viewdir = 0 float3 viewlightpos = _specoffset 1 float3 dirtolight = viewpos xyz viewlightpos float3 h = + 0 5 float atten = 1 0 _ o spec = _speccolor _shininess 2 atten lightmap_off o lmap = v texcoord1 xy unity_lightmapst xy + unity_lightmapst zw return o endcg pass cgprogram vertex vert fragment frag fixed4 frag sv_target fixed4 c = tex i fixed3 spec = i spec rgb c a 1 c rgb += spec c rgb = c rgb + spec c rgb spec lightmap_off fixed3 lm = decodelightmap i c rgb = lm return c endcg lightprobes con virtual gloss per vertex additive shader environment lightprobes with virtualgloss per vertex properties _maintex gloss = _specoffset offset from = 10 2 _specrange = 20 _speccolor = 1 1 _shininess range 01 = 0 078125 _ influence = 1 subshader tags = = lod 100 cginclude multi_compile lightmap_off lightmap_on sampler _maintex float4 _maintex_st float3 _specoffset float _specrange float3 _speccolor float _shininess float _shlightingscale struct v float4 pos sv_position float2 uv texcoord0 float3 refl texcoord1 fixed3 spec texcoord3 fixed3 shlighting texcoord4 v vert v o o pos = v o uv = v texcoord float3 worldnormal = v float3 viewnormal = v float4 viewpos = v float3 viewdir = 0 float3 viewlightpos = _specoffset 1 float3 dirtolight = viewpos xyz viewlightpos float3 h = + 0 5 float atten = 1 0 _ o spec = _speccolor _shininess 2 atten o shlighting = _shlightingscale return o endcg pass cgprogram vertex vert fragment frag fixed4 frag sv_target fixed4 c = tex i c rgb = i shlighting c rgb += i spec rgb c a return c endcg mejores pr cticas optimizacin de gpu alpha testing algunos gpus particularmente aquellos encontrado en dispositivos mviles incurren en una sobre carga de rendimiento alta por alpha testing uso de las operaciones discard y clip en shaders usted debera remplazar los shaders alpha test con alpha blended si es posible dnde alpha testing no puede ser evitado usted debera mantener el nmero general de pixeles alpha tested visibles a un mnimo compresin de textura ios algunas im genes especialmente si se est utilizando la compresin de textura ios android pvr son propensos a defectos visuales en el canal alpha en tales casos usted podra necesitar ajustar los par metros de compresin pvrt directamente en su software de im genes usted puede hacer eso al instalar el pvr export plugin o utilizando www imgtec com powervr insider powervr pvrtextool asp de imagination tech los creadores del formato pvrtc el archivo de la imagen comprimida resultante con una extensin pvr ser importada por el editor de unity directamente y los par metros de compresin ser n preservados si texturas comprimidas pvrt no le dan una calidad visual suficientemente buena o usted necesita en especial una imagen nitida usted podra hacerlo para texturas entonces usted debera considerar utilizar texturas 16 bit m s bien de 32 bit al hacer esto usted va a reducir el ancho de banda de memoria y los requerimientos de almacenamiento por la mitad compresin de textura para android todos los dispositivos android con soporte para opengl es 2 0 tambin soporta el formato de compresin etc1 por lo tanto se alienta a que cuando se posible se utilice etc1 como el formato de textura preferido si se est apuntando a una arquitectura especifica de gr ficas tal como nvidia tegra o qualcomm snapdragon puede valer la pena considerar utilizar los formatos de compresin de propiedad disponibles en esas arquitecturas el mercado de android tambin le permite un filtro basado en el formato de compresin de textura soportado significando un archivo de distribucin con por ejemplo dxt compressed textures pueden prevenirse de ser descargados en un dispositivo que no los soporta un ejercicio descargue render to texel bake iluminacin a su modelo corra el filtro high pass en el resultado en photoshop edite el shader mobile cubemapped incluido en el paquete render to texel para que los detalles de luz de baja frecuencia sean remplazados por una vertex light mtodos de scripting y gameplay optimizando scripts 2016 todos los derechos reservados unity technologies publication 5 3 q tutoriales respuestas de la comunidad base de conocimientos foros asset store de assets 