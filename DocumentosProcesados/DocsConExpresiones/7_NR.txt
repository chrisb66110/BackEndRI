 bases de datos nosql gu definitiva con las diferencias ventajas y desventajas de cada una forums pandorafms com community wiki library espa english main comunidad bases de datos nosql gu definitiva abril 20 2017 by sara mart 11 10 votes average 4 90 cargando el post est disponible tambi en ingl no cabe duda de que la forma en que las aplicaciones web tratan los datos ha cambiado de forma significativa durante la d cada vez se recopilan m s datos y cada vez son m s los usuarios que acceden a estos datos al mismo tiempo esto significa que la escalabilidad y el rendimiento se han convertido en aut retos para las bases de datos relacionales basadas en esquemas la evoluci de nosql el problema de la escalabilidad de sql fue reconocido por empresas web 2 0 con grandes necesidades de datos e infraestructura como google amazon y facebook ellos solos tuvieron que buscar soluciones propias a este problema con tecnolog como bigtable dynamodb y cassandra este inter creciente dio lugar a una serie de sistemas de gesti de base de datos nosql con un enfoque en el rendimiento la fiabilidad y la coherencia se reutilizaron y mejoraron varias estructuras de indexaci existentes con el prop de mejorar la b y el rendimiento de lectura en primer lugar hab tipos de bases de datos nosql origen desarrolladas por grandes empresas para satisfacer sus necesidades espec como bigtable de google que se cree es el primer sistema nosql y dynamodb de amazon el de estos sistemas patentados inici el desarrollo de varios sistemas de bases de datos de c abierto y de propietarios similiares siendo los m s populares hypertable cassandra mongodb dynamodb hbase y redis qu hace a nosql diferente una diferencia clave entre las bases de datos de nosql y las bases de datos relacionales tradicionales es el hecho de que nosql es una forma de almacenamiento no estructurado esto significa que nosql no tiene una estructura de tabla fija como las que se encuentran en las bases de datos relacionales ventajas y desventajas de las bases de datos nosql ventajas las bases de datos de nosql presentan muchas ventajas en comparaci con las bases de datos tradicionales a diferencia de las bases de datos relacionales las bases de datos nosql est n basadas en key value pairs algunos tipos de almac de bases de datos nosql incluyen diferentes tipos de almacenes como por ejemplo el almac de columnas de documentos de key value store de gr ficos de objetos de xml y otros modos de almac de datos algunos tipos de almac de bases de datos nosql incluyen almacenes de columnas de documentos de valores de claves de gr ficos de objetos de xml y otros modos de almac de datos podr decirse que las bases de datos nosql de c abierto tienen una implementaci rentable ya que no requieren las tarifas de licencia y pueden ejecutarse en hardware de precio bajo cuando trabajamos con bases de datos nosql ya sean de c abierto o tengan un propietario la expansi es m s f cil y m s barata que cuando se trabaja con bases de datos relacionales esto se debe a que se realiza un escalado horizontal y se distribuye la carga por todos los nodos en lugar de realizarse una escala vertical m s t en los sistemas de bases de datos relacionales desventajas por supuesto las bases de datos nosql no son perfectas y no siempre van a ser la elecci ideal la mayor de las bases de datos nosql no admiten funciones de fiabilidad que son soportadas por sistemas de bases de datos relacionales estas caracter de fiabilidad pueden resumirse en consistencia aislamiento y durabilidad esto tambi significa que las bases de datos nosql que no soportan esas caracter ofrecen consistencia para el rendimiento y la escalabilidad con el fin de apoyar las caracter de fiabilidad y coherencia los desarrolladores deben implementar su propio c lo que agrega m s complejidad al sistema esto podr limitar el n de aplicaciones en las que podemos confiar para realizar transacciones seguras y confiables como por ejemplo los sistemas bancarios otras formas de complejidad encontradas en la mayor de las bases de datos nosql incluyen la incompatibilidad con consultas sql esto significa que se necesita un lenguaje de consulta manual haciendo los procesos mucho m s lentos y complejos nosql vs bases de datos relacionales esta tabla ofrece una breve comparaci entre las funcionalidades de nosql y las bases de datos relacionales cabe se que esta tabla muestra una comparaci a nivel de la base de datos no sobre los diversos sistemas de gesti de bases de datos que implementan ambos modelos estos sistemas proporcionan sus propias t patentadas para superar los problemas y deficiencias encontradas en el sistema adem s de intentar mejorar significativamente el rendimiento y la fiabilidad tipos de almacenamiento de datos nosql key value store en el tipo de almac key value se utiliza una tabla hash en la que una clave apunta a un elemento las claves pueden ser organizadas por grupos clave l requiriendo solamente estas claves para ser dentro de su propio grupo esto permite tener claves id en diferentes grupos l la siguiente tabla muestra un ejemplo de un almac de valores clave en el que la clave es el nombre de la ciudad y el valor es la direcci de ulster university en esa ciudad algunas implementaciones del almac de valores clave proporcionan mecanismos de almacenamiento en el cach lo que mejora en gran medida su rendimiento todo lo que se necesita para hacer frente a los elementos almacenados en la base de datos es la clave los datos se almacenan en una forma de una cadena json o blob grande uno de los mayores defectos en esta forma de base de datos es la falta de consistencia a nivel de la base de datos esto puede ser a por los desarrolladores con su propio c aunque esto suponga m s esfuerzo y tiempo la base de datos nosql m s famosa que se construye en un almac de valores clave key value es dynamodb de amazon almac de documentos los almacenes de documentos son similares a los almacenes de valores clave porque no tienen un esquema y se basan en un modelo de valor clave ambos carecen de coherencia en el nivel de base de datos lo que hace posible que las aplicaciones proporcionen m s fiabilidad las diferencias m s significativas son en el almac de documentos los valores proporcionan codificaci xml json o bson codificado para los datos almacenados la aplicaci de base de datos m s popular que se basa en un almac de documentos es mongodb almacenamiento en columnas los datos se almacenan en columnas en lugar de almacenarse en filas se hace en la mayor de los sistemas de gesti de bases de datos un almac de columnas est compuesto por una o m s familias de columnas que se agrupan de forma l en determinadas columnas en la base de datos una clave se utiliza para identificar y se a un n de columnas en la base de datos cada columna contiene filas de nombres o tuplas y valores ordenados y separados por comas los almacenes de columnas tienen acceso r pido de lectura y escritura a los datos almacenados en un almac de columnas las filas que corresponden a una sola columna se almacenan como una sola entrada de disco lo cual facilita el acceso durante las operaciones de lectura y escritura las bases de datos m s populares que usan el almac de columnas incluyen google bigtable hbase y cassandra base gr fica en una gr fica de una base de datos nosql se utiliza una de gr fica dirigida para representar los datos el gr fico est compuesto por bordes y nodos formalmente un gr fico es una representaci de un conjunto de objetos donde algunos pares de objetos est n conectados por enlaces los objetos interconectados est n representados por abstracciones matem ticas llamadas v y los enlaces que conectan algunos pares de v se llaman bordes un gr fico ser un tipo de representaci de datos compuesto por un conjunto de v y de bordes que conectan entre s mostrando visualmente su relaci matem tica esto ilustra la estructura de una base de datos de manera gr fica donde se usan bordes y nodos para representar y almacenar los datos estos nodos est n organizados entre s y queda representado por los bordes entre los nodos tanto los nodos como las relaciones tienen propiedades definidas las bases de datos de gr ficos suelen utilizarse en aplicaciones de redes sociales estas permiten a los desarrolladores centrarse m s en las relaciones entre los objetos que en los propios objetos en este contexto de hecho permiten un entorno escalable y f cil de usar actualmente infogrid y infinitegraph son las bases de datos gr ficas m s populares sistemas de gesti de bases de datos nosql por una breve comparaci de las bases de datos la tabla siguiente proporciona una breve comparaci entre los diferentes sistemas de gesti de bases de datos nosql mongodb tiene un sistema flexible de almacenamiento de esquemas lo que significa que los objetos almacenados no tienen que tener la misma estructura o los mismos campos mongodb tambi tiene algunas caracter de optimizaci que distribuye las colecciones de datos mejorando el rendimiento y consiguiendo un sistema m s equilibrado otros sistemas de base de datos nosql como apache couchdb tambi se consideran bases de datos de tipo almac de documentos por ello comparten muchas caracter con mongodb a excepci de que es posible acceder a la base de datos usando apis restful rest es un estilo arquitect que consiste en un conjunto coordinado de restricciones arquitect aplicadas a componentes conectores y elementos de datos todo esto dentro de la world wide web est basado en un protocolo de comunicaciones apilables cliente servidor protocolo cacheable de comunicaciones ejemplo el protocolo las aplicaciones restful utilizan peticiones http para publicar leer y eliminar datos en cuanto a bases de datos de bases de columnas hypertable es una base de datos nosql escrita en c y basada en bigtable de google hypertable soporta la distribuci de almacenes de datos entre nodos para maximizar la escalabilidad al igual que mongodb y couchdb una de las bases de datos nosql m s utilizadas es cassandra desarrollada por facebook se trata de una base de datos de almacenes de columnas que incluye muchas caracter dirigidas a la fiabilidad y tolerancia de fallos cassandra cassandra es un sistema de gesti de bases de datos desarrollado por facebook cuyo objetivo era crear un dbms sin fallos y que proporcione la m xima disponibilidad cassandra es principalmente una base de datos de almacenes de columnas algunos estudios se refieren a cassandra como un sistema h inspirado en bigtable de google de datos de almac de y en dynamodb de amazon de datos de valor esto se consigue proporcionando un sistema de valor clave pero las claves de cassandra apuntan a un conjunto de familias de columnas dependiendo del sistema de archivos distribuido de google y de las caracter de disponibilidad de dynamo hash cassandra est dise para almacenar enormes cantidades de datos distribuidos a trav de diferentes nodos cassandra es un dbms dise para manejar cantidades masivas de datos repartidos entre muchos servidores mientras que proporciona un servicio altamente disponible sin un solo punto de fallo lo cual es esencial para un gran servicio como facebook las principales caracter de cassandra incluyen no hay ni un solo punto de fallo para que esto se consiga cassandra debe funcionar como un racimo de nodos eso no significa que los datos de cada cl sean los mismos sin embargo si debe serlo el software de gesti cuando ocurre un fallo en uno de los nodos los datos en ese nodo ser n inaccesibles sin embargo otros nodos seguir n siendo accesibles un hashing distribuido es un esquema que proporciona la funcionalidad de tabla hash de manera que la adici o supresi de una ranura no cambia significativamente la asignaci de claves a dichas ranuras esto proporciona la capacidad de distribuir la carga a los servidores o nodos seg su capacidad y a su vez minimizar el tiempo de inactividad interfaz de cliente relativamente f cil de usar cassandra utiliza apache thrift para su interfaz de cliente apache thrift ofrece un cliente rpc en varios idiomas pero la mayor de los desarrolladores prefieren alternativas de c abierto construidas sobre apple thrift como hector otras caracter de disponibilidad una de las caracter de cassandra es la replicaci de datos b sicamente refleja datos a otros nodos del cl la replicaci puede ser aleatoria o espec para maximizar la protecci de datos coloc ndola por ejemplo en un nodo en un centro de datos diferente otra caracter que se encuentra en cassandra es la pol de partici la directiva de partici decide en qu nodo se va a colocar la clave esto tambi puede ser aleatorio u ordenado al utilizar ambos tipos de pol de partici cassandra puede lograr un equilibrio entre el equilibrio de carga y la optimizaci del rendimiento de las consultas consistencia funciones como la replicaci hacen que la consistencia sea un desaf esto se debe al hecho de que todos los nodos deben estar actualizados en cualquier punto en el tiempo con los valores m s recientes sin embargo cassandra intenta mantener un equilibrio entre las acciones de replicaci y las acciones de lectura escritura proporcionando esta personalizaci al desarrollador acciones de lectura escritura el cliente env una solicitud a un nodo de cassandra el nodo de acuerdo con la pol de replicaci almacena los datos en el cl cada nodo realiza primero el cambio de datos en el registro de confirmaci y a continuaci actualiza la estructura de la tabla con el cambio ambos realizados de forma sincr la operaci de lectura es tambi muy similar una petici de lectura se env a un solo nodo y ese nodo es el que determina qu nodo contiene los datos de acuerdo con la pol de partici ubicaci mongodb mongodb es una base de datos libre de esquemas orientada a documentos escrita en c la base de datos est basada en el almac de documentos lo que significa que almacena valores en forma de datos codificados la elecci del formato codificado en mongodb es json es muy potente porque incluso si los datos est n anidados dentro de los documentos json seguir siendo consultable e indexable las subsecciones que siguen describen algunas de las caracter clave disponibles en mongodb shards fragmentos sharding es la partici y distribuci de datos a trav de m m quinas un fragmento es una colecci de nodos mongodb a diferencia que cassandra donde los nodos estaban sim distribuidos el uso de fragmentos tambi implica la capacidad de escalar horizontalmente a trav de m nodos en el caso de que haya una aplicaci que utilice un servidor de base de datos se puede convertir en cl fragmentado con muy pocos cambios en el c de la aplicaci original por la forma en que sharding es ejecutada por mongodb oftware est casi desacoplado de las api p lenguaje de consulta mongo como se mencion anteriormente mongodb utiliza una api restful para recuperar ciertos documentos de una colecci db se crea un documento de consulta que contiene los campos que deben coincidir con los documentos deseados acciones en mongodb hay un grupo de servidores llamados enrutadores cada uno act como un servidor para uno o m s clientes del mismo modo el cl contiene un grupo de servidores denominados servidores de configuraci cada uno contiene una copia de los metadatos que indican qu fragmento contiene qu datos las acciones de lectura o escritura se env desde los clientes a uno de los servidores de enrutador del cl y son encaminadas autom ticamente por ese servidor a los fragmentos adecuados que contienen los datos con la ayuda de los servidores de configuraci un fragmento en mongodb similar a cassandra es que ambos tienen un esquema de replicaci de datos que crea un conjunto de r de cada fragmento que contiene exactamente los mismos datos hay dos tipos de esquemas de r en mongodb master slave replication y replica set replication replica set proporciona m s automatizaci y mejor manejo para los fallos mientras que master slave suele requerir la intervenci de un administrador independientemente del esquema de replicaci en cualquier punto de conjunto de r s un fragmento act como fragmento primario todos los fragmentos de r son fragmentos secundarios todas las operaciones de escritura y lectura pasan al fragmento primario y luego se distribuyen de forma uniforme fuera a los otros fragmentos secundarios del conjunto en el gr fico de abajo vemos la arquitectura de mongodb explicada anteriormente mostrando los servidores del enrutador en verde los servidores de configuraci en amarillo y los fragmentos que contienen los nodos mongodb en azules cabe se que el sharding compartir los datos entre en mongodb es completamente autom tico lo que reduce la tasa de fallos y hace mongodb un sistema de gesti de base de datos altamente escalable estructuras de indexaci para bases de datos nosql la indexaci es el proceso de asociar una clave con la ubicaci de un registro de datos correspondiente en un dbms hay muchas estructuras de datos de indizaci utilizadas en las bases de datos nosql las siguientes secciones discutir n brevemente algunos de los m m s comunes la indexaci de los rboles b la indexaci de los rboles t y la indexaci de los rboles indexaci de rboles b el rbol b es una de las estructuras de m s comunes en dbms en los rboles b los nodos internos pueden tener un n variable de nodos secundarios dentro de un rango predefinido una diferencia importante de otras estructuras de rbol como avl es que el rbol b permite que los nodos tengan un n variable de nodos secundarios lo que va a significar menos equilibrio de rbol y m s espacio perdido el b tree es una de las variantes m s populares de b trees el b tree es una mejora sobre b tree que requiere todas las claves para residir en las hojas indexaci de rboles t la estructura de datos de un rbol t fue dise combinando caracter de avl trees y b trees rbol y b un rbol avl es un tipo de auto equilibrio binario de rboles de b mientras que un rbol b es m s desequilibrado y cada nodo puede tener un n diferente de hijos en un rbol t la estructura es muy similar a los rboles b y avl cada nodo almacena m s de una tupla value adem s la b binaria se utiliza en combinaci con los nodos de m tuplas para producir un mejor almacenamiento y rendimiento un rbol t tiene tres tipos de nodos un t node que tiene un hijo derecho e izquierdo un nodo de hoja sin hijos y un nodo de media hoja con un solo hijo se cree que los rboles t tienen un mejor rendimiento general que los rboles avl indexaci de rboles el rbol es b sicamente una mejora sobre los rboles rojo negro una forma de un rbol binary search en el que los nodos hoja contienen el valor value el rbol se propuso para mejorar el rendimiento de los actuales m de indexaci un rbol de de orden m donde m es el grado m del rbol satisface las siguientes propiedades cada nodo es rojo o negro pero la ra es siempre negra si un nodo es rojo entonces sus dos hijos son negros para cada nodo interno todas las rutas simples desde el nodo hasta los nodos hoja descendientes contienen el mismo n de nodos negros cada nodo interno tiene un valor de clave los nodos de hoja son bloques que tienen entre 2 y m pares key value record si un rbol tiene un nodo entonces debe ser una hoja que es la ra del rbol y puede tener entre 1 a m elementos de datos clave los nodos de hoja pueden ir hacia adelante y hacia atr s aqu vemos una comparaci directa de rendimiento entre rboles el orden del t tree b tree y el tree utilizado fue m 512 el tiempo se registra para las operaciones de b inserci y supresi con relaciones de actualizaci que var entre para un de registros con las operaciones que resultan en la adici de otros registros al est claro que con una proporci de actualizaci de 0 b tree y t tree tienen mejores resultados que tree sin embargo con la proporci de actualizaci aumentado el de tree funciona significativamente mejor que otras estructuras de datos cu l es el caso para nosql las bases de datos relacionales ofrecen consistencia no est n optimizadas para un alto rendimiento en aplicaciones en las que se almacenan y procesan datos masivos con las bases de datos nosql ganaron mucha popularidad debido a su alto rendimiento alta escalabilidad y facilidad de acceso sin embargo todav carecen de las caracter que proporcionan consistencia y confiabilidad afortunadamente una serie de dbms nosql abordan estos retos ofreciendo nuevas caracter para mejorar la escalabilidad y la fiabilidad no todos los sistemas de base de datos nosql funcionan mejor que las bases de datos relacionales mongodb y cassandra tienen un rendimiento similar y en muchos casos mejor que en las bases de datos relacionales en operaciones de escritura y eliminaci no hay correlaci directa entre el tipo de almacenamiento y rendimiento de un dbms nosql las implementaciones de nosql experimentan cambios por lo que el rendimiento puede variar por lo tanto las mediciones de rendimiento a trav de tipos de base de datos en diferentes estudios siempre deben actualizarse con las versiones del software de la base de datos para que estos n sean exactos aunque no podemos ofrecer un veredicto definitivo sobre su rendimiento he aqu algunos puntos a tener en cuenta la indexaci tradicional de rbol b y rbol t se utiliza com en bases de datos tradicionales un estudio ofreci mejoras mediante la combinaci de las caracter de m estructuras de indexaci para llegar al el super a otras estructuras en la mayor de las pruebas especialmente con enormes conjuntos de datos y con altas proporciones de actualizaci la estructura b present el peor desempe de todas las estructuras de indexaci cubiertas en este art se puede y se debe hacer m s trabajo para mejorar la consistencia de los dbmss nosql la integraci de ambos sistemas nosql y bases de datos relacionales es un rea que deber ser explorada nosql comercializa funciones de confiabilidad y consistencia para un rendimiento y proceso de escalabilidad extremo esto lo convierte en una soluci especializada ya que el n de aplicaciones que pueden depender de las bases de datos nosql sigue siendo limitado as aunque la especializaci puede ser poco flexible si queremos un trabajo especializado r pido y eficaz lo m s indicado va a ser nosql fuente toptal https www toptal com database the definitive guide to nosql databases autor original mohamad altarade comments edgar vargas octubre 4 2017 at 2 51 pm interesante art sin embargo s hay que corregir la traducci de graph al espa por grafo en este sentido lo que mencionas por base gr fica debe ser base de datos orientada a grafos el concepto de graph proviene de una de las ramas de matem tica llamada investigaci operativa reply carla andres octubre 17 2017 at 1 22 pm hola edgar muchas gracias por tu aportaci reply fernando aguilar febrero 14 2018 at 9 18 pm al tener la parte del performance se tiene que las bd nosql tienen performance alto mientras que las sql se encuentran en bajo no en en bajo ser correcto decir que el performance de una bd nosql es 3 veces mejor que las sql saludos reply carla andres marzo 7 2018 at 12 48 pm hola fernando hay una diferencia en cuanto al rendimiento entre sql y no sql habr que hacer una comparaci real en base a tiempos s es verdad que las bbdd no sql son m s r pidas pero tambi tienen grandes desventajas tal y como ves en el art supongo que todo es relativo a ojos del usuario muchas gracias reply tomas marzo 5 2018 at 8 37 pm hola queria hacer una pregunta tengo un cliente que es una escuela y me pidio un sistema es recomendable usar nosql reply alucinadomehayo marzo 9 2018 at 2 05 pm pero un sistema para qu inventariado asistencia gesti presupuestaria reply carla andres marzo 9 2018 at 4 16 pm hola tom s hola depende un poco de cada casa concreto mira las ventajas e inconvenientes y elige la opci m s acorde a las necesidades de tu cliente si quieres velocidad antes que la seguridad usa nosql de lo contrario un sistema de base de datos relacional espero haberte ayudado muchas gracias reply marcelo abril 13 2018 at 11 43 am muy importante un almac de columnas no es una base nosql pero un modelo de agregaci de columnas s que lo es en un almac de columnas los datos se almacenan por columnas mientras que en una base nosql de columnas los datos se organizan por filas y columnas hay diferencia cuidado un saludo reply maria junio 12 2018 at 12 51 pm hola marcelo muchas gracias por tu aportaci un saludo reply segundo pantoja mayo 22 2018 at 4 21 am hola buenas noches tengo una duda me piden hacer un programa para manejar la base de datos de los trabajadores de una empresa y representarla como una hoja de vida cuando se consulte un trabajador cual base de datos me recomiendan usar reply maria junio 14 2018 at 11 00 am hola segundo pantoja gracias por tu comentario respecto a tu duda depende de tus necesidades las bases de datos relacionales son m s sencillas de gestionar pero no tienen una buena organizaci aunque son buenas para empezar en este mundillo ejemplo mariadb mysql oracle etc si quieres una estructuraci m s organizada del contenido es mejor que utilices una base de datos nosql como habr s visto en el art ya sabr s sus ventajas e inconvenientes ejemplo mongodb cassandra esperamos haberte servido de ayuda te recomendamos que te suscribas a la newsletter para estar al tanto de las novedades tanto de pandora fms como de otros contenidos del blog un saludo reply leave a reply cancel reply your email address will not be published required fields are marked comment name email website este sitio usa akismet para reducir el spam aprende c se procesan los datos de tus comentarios previous post monitorizaci ux pwr nuevas funciones de pandora fms next post topologia de red y monitorizaci distribuida recent posts how to fight computer stress agosto 27 2018 c luchar contra el estr inform tico agosto 27 2018 what new in pandora fms 7 0 ng 726 agosto 24 2018 novedades pandora fms 7 0 ng 726 agosto 23 2018 several factors that can slow down your computer agosto 20 2018 algunas causas por las que un ordenador puede ir lento agosto 20 2018 is it possible to prevent software glitch agosto 17 2018 search newsletter subscribe to our pandora fms newsletter it will keep you informed about new releases plugins features and integrations we won t ever give your email to anybody else email please read our privacy policy here tags alternatives antivirus apache software foundation apis bam chat chatops ciberseguridad cloud communication docker swarm ehorus endpoint funcionalidades g data antivirus integration international data corporation malware mattermost monitorizaci mysql nagios negocio open networking foundation pandora pandora fms pandora fms pandora fms plugin productivity ransomware remote control remote management rmm sdn slack software defined network market sp sql teamviewer teamwork varnish cache vnc wannacry comunidad tecnolog tutorial algunas causas por las que un ordenador puede ir lento agosto 20 2018 by robin izquierdo comunidad geek compuserve y fidonet qu hab antes de internet agosto 13 2018 by robin izquierdo comunidad enterprise funcionalidades tecnolog pandorafms como alternativa a ibm tivoli netcool agosto 10 2018 by jimmy olano comunidad geek c se lo monta iron man para monitorizar sus trajes agosto 6 2018 by dimas pardo comunidad tecnolog beneficios de la monitorizaci para una empresa de soporte o una msp julio 23 2018 by robin izquierdo comunidad internet history from arpanet to the future julio 16 2018 by alberto dominguez comunidad 10 technology laws julio 9 2018 by alberto dominguez comunidad tecnolog sabes lo qu es la acs aqu una explicaci en profundidad julio 4 2018 by jimmy olano comunidad so s the future of internet 10 years from now julio 2 2018 by alberto dominguez comunidad 18 interesting computing facts junio 29 2018 by alberto dominguez comunidad how sdn change our vision on networks junio 28 2018 by alexander la rosa comunidad redes tecnolog c las redes definidas por software cambian nuestra visi sobre las redes junio 28 2018 by alexander la rosa this website uses cookies to improve your experience accept read more shares 