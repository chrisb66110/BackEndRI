 mongodb son las bases de datos no relacionales el futuro life mis lecturas s var js fjs = d if return js = d js id = id js src = connect facebook net en_us all fjs parentnode script facebook jssdk quines somos servicios y tarifas contacto registro navigation life tecnologia y estilo de vida digital personal profesional social relacionado profesional tecnologa big data zoom galera 1 comentario te explicamos cmo funcionan las bases de datos utilizadas en big data y otras aplicaciones mongodb son las bases de datos no relacionales el futuro por andrs purrios 28 mayo 2014 si hay algo que ha permanecido pr cticamente inmutable en tecnologa eso son las bases de datos el modelo relacional con m s de 40 aos a sus espaldas sigue vigente en nuestros das y es la base de la mayora de aplicaciones que acceden a una base de datos sin embargo no es el nico modelo existente ni el nico en uso en los ltimos tiempos han cobrado importancia las bases de datos que no cumplen con los principios expresados por codd en 1970 se trata de las bases de datos no relacionales tambin conocidas como nosql por no utilizar el lenguaje sql casi universal en las bases de datos convencionales se trata de una moda est n muertas las bases de datos relacionales en este reportaje te explicamos en qu consisten esas bases de datos y qu ventajas te pueden aportar recuerdas cmo funciona una base de datos las bases de datos relacionales organizan la informacin en tablas cada tabla tiene un nmero de columnas o campos determinados por el administrador y filas que contienen los datos una tabla de una base de datos relacional tiene una estructura semejante a la de una hoja de c lculo adem s estas tablas pueden relacionarse entre s de manera que mediante consultas que combinan varias tablas se puede obtener informacin de varias de ellas estas relaciones pueden ser de un elemento de una tabla a un elemento de otra de uno a varios o de varios a varios el modelo relacional para mantener la integridad entre las distintas tablas que componen la base de datos se utilizan las relaciones en este ejemplo la tabla empleados mantiene una relacin con las tablas nminas y vacaciones la integridad referencial impide que se den de alta nminas o periodos vacacionales de empleados inexistentes esto unido a un lenguaje que permite obtener la informacin de forma sencilla as como interactuar con ella dando de alta nuevos registros modificando los ya existentes etc hace del modelo relacional perfecto para la mayora de aplicaciones por varios motivos el primero es que organiza la informacin de forma muy clara cada fila de la tabla empleados contendr la informacin de un empleado mientras que la tabla nminas contendr una nmina adem s estas bases de datos est n diseadas para mantener la integridad de las relaciones no puede haber una nmina para un empleado inexistente as como parece lgico pensar que en la tabla nminas no se permitir que haya varias filas con el mismo cdigo de empleado para el mismo mes pero no todo son ventajas este modelo parece perfecto o casi permite crear desde bases de datos muy sencillas hasta las m s complejas garantiza la integridad de los datos y dispone de un lenguaje sencillo y que casi cualquier programador conoce bien el principal problema de este modelo es que todo esto es costoso en trminos de rendimiento no es que las bases de datos relacionales sean terriblemente lentas pero cada operacin tiene un coste de tiempo elevado precisamente por todas esas garantas sobre los datos y las transacciones adem s las estructuras que se crean est n diseadas para modificarse poco si necesitamos aadir un nuevo dato a algunos de nuestros empleados la tabla empleado necesitar una nueva columna todos los empleados existentes tendr n ese nuevo campo lo necesiten o no esto puede hacer que una base de datos cuya estructura necesite ser modificada peridicamente crezca a lo ancho aumentando la necesidad de almacenamiento y los tiempos de proceso la aproximacin no relacional supongamos que prescindimos de una estructura tan bien pensada renunciamos a unas tablas perfectamente definidas que garantizan la integridad y en las que todo parece ser perfectamente predecible a cambio obtenemos rapidez y flexibilidad desde el punto de vista de nuestra base de datos de empleados y nminas parece que lo que ganamos en velocidad no compensa una aplicacin para gestionar este tipo de informacin incluso en una compaa con muchos empleados no suele tener tanta interaccin con la base de datos como para que la velocidad llegue a suponer un problema si tanto la aplicacin como la base de datos est n bien diseadas adem s en el caso de los empleados es muy til que la integridad de los datos est garantizada de este modo evitamos que se emitan nminas a un empleado que ha dejado la compaa o que alguien cobre varias veces donde empieza a resultar interesante utilizar bases de datos nosql es en casos en los que la cantidad de informacin es muy grande aplicaciones cientficas las transacciones de un gran banco o incluso sistemas de analtica web en tiempo real en estos casos la cantidad de informacin es tanta que las aproximaciones mediante bases de datos relacionales obligan a dedicar muchos esfuerzos a la optimizacin para obtener un resultado aceptable cmo se disea un modelo no relacional las bases de datos basadas en sql son parte de las habilidades b sicas de la mayora de programadores incluso los especializados en reas bien alejadas de las aplicaciones de gestin conocen los principios b sicos y son capaces de utilizar el lenguaje sql en caso de necesidad esto hace que la forma de disear estas bases de datos pueda resultar un impedimento las bases no relacionales exigen pensar de otra forma desde el principio por ejemplo en mongodb base de datos m s nuestras tablas empleados y vacaciones podran quedar as shell de mongodb mostrando la entrada de un empleado la lista de periodos de vacaciones est embebida en esta esto tiene algunas consecuencias la primera es que toda la informacin relacionada est almacenada en el mismo sitio a la hora de acceder a los datos de un empleado podremos leer toda la informacin vacaciones incluidas en una sola operacin de forma muy r pida fjate tambin que aquellos campos que no tenan informacin en el modelo relacional aqu simplemente no existen no ocupan espacio en disco y no consumen memoria al hacer una consulta algo que facilita que el tiempo necesario para las consultas se reduzca la consecuencia indeseada puede llegar cuando hacemos lo mismo con las nminas si el administrador de la empresa quiera obtener un listado con todas las nminas del mes de junio en ese caso habr que recorrer uno por uno los empleados en busca de las nminas adecuadas dado que en este caso puede ser incmodo utilizar un nico documento mongodb proporciona tambin referencias a otros documentos el de las nminas podra ser una buena aplicacin de esta caracterstica los m s puristas te dir n que aqu tambin puedes evitar usarla el lenguaje de mongodb recuperar informacin de la base de datos es muy diferente en este modelo respecto a las bases de datos relacionales y el lenguaje sql consulta en sql select from empleados nominas vacaciones where empleados id_empleado = nominas id_empleado and empleados id_empleado = vacaciones id_empleado and empleados apellidos = ndez garc consulta en mongodb db empleados apellidos fernndez garca en el primer ejemplo hemos seleccionado toda la informacin de las tres tablas para lo que hemos tenido que indicar las relaciones entre ellas as como especificar una condicin sobre la columna por el que queremos filtrar la consulta en el segundo caso slo tenemos que especificar la condicin por la que queremos buscar la informacin relativa a las vacaciones est en el mismo documento y la que hemos llevado a otro las nminas son accesibles desde los resultados de forma autom tica supongamos ahora que necesitamos aadir las vacaciones de un empleado en la base relacional deberemos de dar de alta una entrada en la tabla vacaciones mientras que en mongodb bastar con actualizar la entrada del empleado en cuestin insercin en sql insert into vacaciones fecha_inicio fecha_ select id_empleados 20 07 2014 as fecha_inicio 31 07 2014 as fecha_fin from empleados where apellidos = ndez garc actualizacin en mongodb db empleados apellidos ndez garc vacaciones 07 07 en el primer caso es necesario hacer una consulta para localizar el identificador del empleado por sus apellidos para insertar una nueva fila en la tabla vacaciones para hacer todo en una sola operacin utilizamos un pequeo truco introducir como cadenas los valores que no salen de la tabla de empleados e n mongodb se utilizan dos par metros el primero para especificar la condicin de bsqueda y el segundo para indicar los cambios a realizar en el empleado la orden indica que se debe incorporar la informacin a un array como ves la forma de interactuar con la base de datos es m s sencilla que en sql un lenguaje cuyas primeras versiones son de 1974 y que est basado en comandos de texto el modelo de mongodb utiliza sintaxis propia de la programacin orientada a objetos lenguaje usado es y dispone de libreras para trabajar con la base de datos en los lenguajes m s utilizados por supuesto hay capas de abstraccin que permiten trabajar con bases de datos relacionales de forma m s intuitiva que las viejas pero potentes instrucciones sql an as no se mejora el rendimiento posible que incluso salga y hay que desarrollar m s cdigo para poder utilizarlas tipos de bases no relacionales aunque mongodb es la m s conocida no es la nica base de datos no relacional que existe de hecho hay muchos tipos de base de datos no relacionales existen bases de datos documentales en grafo clave valor cada una de ellas tiene su punto fuerte y algunas encajan en varias de estas definiciones mongodb la m s popular se considera tanto una base de datos documental como clave valor ya que est basada en documentos y los datos se almacenan como pares de claves con un valor asignado una ventaja de la diversidad de opciones existente es que se pueden combinar varios sistemas de bases de datos incluyendo las relacionales aprovechando los puntos fuertes de cada uno en los puntos en los que es necesario adem s en muchas ocasiones se combinan estas arquitecturas complicadas con los sistemas de bases de datos en memoria se trata de bases de datos que no almacenan informacin en disco de modo que son muy r pidas aunque por supuesto es muy costoso y tiene grandes limitaciones un ejemplo de este tipo de arquitecturas es twitter que incluso ha aportado sus propios desarrollos sobre el modelo y combina varios de estos modelos para optimizar el acceso de millones de usuarios a los millones de tweets que se publican cada da bsquedas calculo de los trending topics en tiempo real etc entrevista con luis mesas ingeniero de intelygenz luis mesas intelygenz luis mesas es ingeniero en intelygenz y trabaja como innovation architect est involucrado en diversos proyectos en los que el uso de las bases de datos no relacionales es clave para ofrecer una ventaja competitiva a sus clientes tnl cu les son las diferencias entre una base de datos relacional y otra no relacional como mongodb la diferencia principal es cmo almacena la informacin cada una de ellas una base de datos relacional es como una hoja de excel tienes unas columnas definidas y todos los objetos que crean tienen todos los datos de esas columnas en una no relacional el objeto es polimrfico puede tener los atributos que quieras para cada objeto la ventaja principal la encuentras cuando trabajas con sistemas masivos en una base de datos relacional si tuvieses miles de millones de registros y aades un campo nuevo ese campo se aade a todos los registros ya existentes en una polimrfica no slo se aaden los datos al objeto concreto tnl eso implica que el programador tiene que llevarse parte de la lgica a una capa superior bastante de ella s cuando haces una bsqueda en una base de datos relacional o no la haces contra un ndice tienes un ndice en memoria que relaciona por ejemplo los nombres de usuario con la posicin en disco duro de cada objeto a nivel de bsqueda es muy parecido en ambos casos pero en una no relacional t puedes tener arrays de datos por ejemplo si tienes m s de una direccin postal en una base de datos relacional tendras una tabla de usuarios y otra de direcciones postales cuando haces una bsqueda tienes que hacer un montn de consultas en paralelo primero buscas los usuarios y luego las direcciones que les corresponden en otra tabla en una base como mongodb t le pides el usuario y te devuelve directamente al usuario con todas sus direcciones como el dato est prximo en el disco lo puedes leer entero en mucho menos tiempo los discos est n optimizados para hacer lecturas secuenciales y pierden tiempo para hacer saltos tnl al almacenarse toda la informacin junta desaparecen los joins propios de sql efectivamente las versiones nuevas empiezan a tener algunas referencias entre objetos para convencer a las personas que han usado muchos aos bases de datos relacionales pero no es la funcin principal de estas bases de datos tienes que hacer menos consultas y los datos est n m s prximos as que tienes una mejora de eficiencia porque sacas la informacin del disco mucho m s r pido para una aplicacin pequea como un blog da igual qu tipo de base de datos utilizas cuando la base de datos es muy grande empieza a tener m s sentido irse a bases de datos no relacionales tnl es decir son bases ideales para hacer desarrollos sobre big data cientficas o estadsticas hay bases de datos tipo hdfs que optimizan todo en disco duro y te permiten leer y escribir en paralelo sobre la misma coleccin normalmente de una coleccin de datos cuando est s escribiendo no puedes hacer otras escrituras aunque s puedes leer en paralelo tnl otro de los sistemas que las bases relacionales utilizan son las transacciones cmo se gestionan en mongodb no hay transaccionalidad aunque en versiones futuras quieren meterlo lo delegan en el desarrollador que tiene que implementarla mediante una m quina de estados u otros sistemas tnl esto no supone una limitacin para algunas aplicaciones hay aplicaciones en las que la transaccionalidad es importante porque la informacin est distribuida en varias tablas de modo que hasta que no se termina de escribir en todas ellas no finaliza la transaccin en una no relacional el modelo de cada objeto puede variar y si tienes toda la informacin en el mismo objeto por ejemplo una cuenta bancaria que contenga todas las operaciones y el saldo es un caso crtico est s jugando con el dinero de la gente en una relacional tienes una tabla con un contrato otra de movimientos y el saldo lo puedes tener en la primera escribes el movimiento en su tabla y luego modificas el saldo en el contrato todo eso lo haces en una transaccin en una no relacional no necesitas la transaccin tienes el objeto completo con los movimientos y el saldo los actualizas en memoria y lo escribes en el disco en una sola operacin puedes disear un modelo de datos que no te exija transaccionalidad tnl en qu tipo de proyectos son una ventaja estas bases de datos la principal ventaja es agilidad de desarrollo en tu aplicacin tienes objetos que son estructuras de datos y mtodos que operan sobre ellos en una relacional tienes un mtodo que busca en la base de datos y rellena la informacin desde muchas tablas tienes que hacerlo t tienes que programar la clase para incluir esas relaciones en una no relacional el modelo de datos est emparejado al modelo de objetos cuando cargas un objeto viene todo entero lo almacenas en las propiedades internas del objeto y ya lo tienes es m s f cil a la hora de programar y es m s robusto porque es m s difcil cometer errores te quitas la parte de datos que es la parte m s aburrida de la programacin y te puedes dedicar slo a la funcionalidad de tu aplicacin el programador tiene la sensacin de que su trabajo est m s aprovechado el modelo de datos est emparejado al modelo de objetos cuando cargas un objeto viene todo entero tnl se trata de un lenguaje muy simple con principios de la programacin orientada a objetos recomendaras a un empezar a aprender bases de datos con mongodb hay varios perfiles de personas que empiezan a programar uno muy tpico es la persona que quiere aprender a hacer p ginas web y luego se engancha y se quiere dedicar a eso normalmente quien aprende a hacer p ginas web aprende html css y javascript mongodb y algunas otras utilizan javascript no tienen que aprender un lenguaje nuevo slo objetos y mtodos nuevos para acceder a la informacin es m s natural para ese perfil tnl y para los que hemos aprendido por el otro camino lo bueno es que se simplifica tu modelo de datos en una aplicacin pequea acabas teniendo 7 u 8 tablas en una no relacional la reduccin es m xima tiendes a acumular toda la informacin que sueles tener dispersa la primera direccin de acumulacin son los arrays de informacin cuando tienes m s de un objeto y quieres permitir que sean infinitos normalmente te creas una tabla nueva y una relacin por ejemplo una lista de emails o direcciones relacionadas con un usuario en una base de datos no relacional tienes ya el objeto usuario con el listado de direcciones y de emails si quieres aadir o eliminar lo haces sobre el mismo objeto tnl venas de desarrollar bases de datos convencionales cuesta mucho cambiar la forma de pensar cuesta bastantes iteraciones de pensamiento y leer mucho llevamos muchos aos utilizando las bases de datos relacionales en las universidades estamos muy acostumbrados a utilizar excel una representacin directa de una base de datos relacional es muy natural pensar de esta manera nuestra vida est muy adaptada a ella una carta con los movimientos bancarios son una tabla estamos entrenados para pensar de modo relacional como las no relacionales son polimrficas no hay elementos que en el mundo real te lo evoque es difcil explicar a la gente ese cambio los que llevan muchos aos en el mundo relacional tienen que enfrentarse al miedo al cambio un programador tiene unos plazos y al no conocerlo no se arriesgan siempre est s buscando el proyecto en el que puedas empezar tienes una estimacin y tienes que cumplirla y si tienes mucha experiencia con la relacional ya sabes qu esperar hasta que no empiezas a arriesgar usando la no relacional no conoces el ahorro de tiempo en diseo se ahorra mucho tiempo porque el modelo de datos es m s simple en el desarrollo tambin se ahorra tiempo porque la capa de datos es m s sencilla los que llevan muchos aos en el mundo relacional tienen que enfrentarse al miedo al cambio tnl un caso de xito quiz el m s conocido es el de twitter a lo que m s ha contribuido es al proceso de big data en tiempo real con twitter storm tambin utilizan hadoop para ofrecer la informacin de millones de tweets en tiempo real tnl y cu l es la reaccin de las grandes compaas de bases de datos a este fenmeno est n adquiriendo compaas s peque de bases de datos no relacionales para aguantar el tirn tambin hacen pequeas modificaciones en sus bases relacionales y est n desarrollando productos no relacionales para poder ofrecer ambos cat logos a sus clientes personalmente creo que los grandes actores de las relacionales juegan con ventaja los que han reconocido que hay que adaptarse van a mejorar su cat logo y pueden recomendar la m s base de datos m s apropiada para cada caso el problema de compaas como mongo es que est n convencidas de que el modelo relacional est muerto y no van a desarrollarlo el cat logo las grandes compa es m s completo tnl utiliz is otras bases de datos adem s de las relacionales y de mongodb utilizamos bases clave valor como redis o memcache tienes toda la informacin en memoria con lo cual es muy r pida se utiliza sobre todo como cach de informacin pides el dato y lo guardas en esta base de datos para acelerar el acceso a determinados datos delegas la base de datos relacional o no a una mera persistencia en el tiempo si tengo que regenerar mi sistema porque se ha cado obtienes la informacin de otra base de datos y reconstruyes la memoria pero si tienes una consulta que se repite de forma desproporcionada al resto la aades a esa base de datos clave valor y el acceso resulta muchsimo m s r pido probar mongodb te interesan las bases de datos no relacionales puedes probar mongodb en su propia web mediante una demo tutorial adem s pronto publicaremos un tutorial en el que te enseamos a crear una base de datos mongodb y acceder a ella desde tu web intelygenz mongodb te puede interesar oracle incorpora las bases de datos en memoria by andrs purrios mongodb y teradata se integrar n mediante json by andrs purrios apple compra foundationdb desarrolladora de bases de datos by celia valdeolmillos teradata compra la consultora think big by andrs purrios las personas que gobiernan casi nunca entienden la tecnologa by andrs purrios larry ellison deja de ser ceo de oracle by marcos sagrado foursquare cobrar a algunas empresas por acceder a sus datos by celia valdeolmillos twitter compra gnip empresa de an lisis de datos de redes sociales by celia valdeolmillos one response to mongodb son las bases de datos no relacionales el futuro alejandro 26 agosto 2017 at 0 47 soy demografo de argentina me interesara conversar sobre el uso de este tipo de bases para el manejo de datos censales los censos como casi todas las operaciones estadsticas vienen usando bases relacionales por lo que estuve leyendo de mongo por ejemplo que es poco hasta ahora me parece interesante la opcin que presentan lo que me interesara conocer es cu les son los procesos que se realizan para obtener resultados del censo en formatos que se usan habitualmente distribuciones de frecuencias tabulados indicadores etc me pueden orientar gracias responder deja un comentario click here to cancel reply comentario name email not be website current leave this field empty teknlife servicios y consultora sl 2017 condiciones de uso poltica de privacidad contacto tek n life usa cookies para mejorar la experiencia de usuario si contina navegando acepta las condiciones de uso aceptar var _gaq = _gaq _gaq _setaccount ua 1 _gaq _setdomainname teknlife com _gaq _setcampaigncookietimeout number of milliseconds in 30 days _gaq _trackpageview _gaq _trackevent nobounce over 20 seconds var ga = document script ga type = text javascript ga async = true ga src = https == document location protocol https ssl http www + google analytics com ga js var s = document script s parentnode 